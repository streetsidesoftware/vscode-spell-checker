{
  "name": "code-spell-checker",
  "description": "Spelling checker for source code",
  "displayName": "Code Spell Checker",
  "icon": "images/SpellCheck.png",
  "author": "Jason Dent",
  "license": "GPL-3.0-or-later",
  "version": "2.0.1-alpha.6",
  "publisher": "streetsidesoftware",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/streetsidesoftware/vscode-spell-checker"
  },
  "bugs": {
    "url": "https://github.com/streetsidesoftware/vscode-spell-checker/issues"
  },
  "homepage": "https://github.com/streetsidesoftware/vscode-spell-checker#README.md",
  "engines": {
    "node": ">12.0.0",
    "vscode": "^1.57.0"
  },
  "extensionKind": [
    "workspace"
  ],
  "enableProposedApi": false,
  "categories": [
    "Linters",
    "Other"
  ],
  "keywords": [
    "spell",
    "checker",
    "spellchecker",
    "multi-root ready"
  ],
  "qna": "marketplace",
  "activationEvents": [
    "*"
  ],
  "main": "./packages/client/dist/extension.js",
  "contributes": {
    "virtualWorkspaces": false,
    "untrustedWorkspaces": {
      "supported": false
    },
    "menus": {
      "editor/context": [
        {
          "command": "cSpell.addWordToFolderDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToFolderDictionary",
          "group": "A_cspell@010"
        },
        {
          "command": "cSpell.addWordToWorkspaceDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToWorkspaceDictionary",
          "group": "A_cspell@020"
        },
        {
          "command": "cSpell.addWordToDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToDictionary",
          "group": "A_cspell@040"
        },
        {
          "command": "cSpell.addWordToCSpellConfig",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToCSpellConfig",
          "group": "A_cspell@050"
        },
        {
          "command": "cSpell.addWordToFolderSettings",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToFolderSettings",
          "group": "A_cspell@051"
        },
        {
          "command": "cSpell.addWordToWorkspaceSettings",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToWorkspaceSettings",
          "group": "A_cspell@052"
        },
        {
          "command": "cSpell.addWordToUserDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToUserDictionary",
          "group": "A_cspell@055"
        },
        {
          "command": "cSpell.addWordToUserSettings",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToUserSettings",
          "group": "A_cspell@056"
        },
        {
          "command": "cSpell.addIssuesToDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addIssuesToDictionary",
          "group": "A_cspell@060"
        },
        {
          "command": "cSpell.createCustomDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.createCustomDictionary",
          "group": "A_cspell@070"
        },
        {
          "command": "cSpell.createCSpellConfig",
          "when": "editorTextFocus && cSpell.editorMenuContext.createCSpellConfig",
          "group": "A_cspell@080"
        },
        {
          "command": "cSpell.addIgnoreWord",
          "when": "editorTextFocus && cSpell.editorMenuContext.addIgnoreWord",
          "group": "A_cspell@090"
        }
      ],
      "commandPalette": [
        {
          "command": "cSpellRegExpTester.testRegExp",
          "when": "config.cSpell.experimental.enableRegexpView"
        },
        {
          "command": "cSpellRegExpTester.editRegExp",
          "when": "view == cSpellRegExpView"
        }
      ],
      "view/item/context": [
        {
          "command": "cSpellRegExpTester.editRegExp",
          "when": "view == cSpellRegExpView && viewItem == regexp",
          "group": "inline"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cspell-explorer",
          "title": "Spell Checker Info",
          "icon": "resources/dark/check_circle.svg",
          "when": "config.cSpell.experimental.enableRegexpView"
        }
      ]
    },
    "views": {
      "cspell-explorer": [
        {
          "id": "cSpellRegExpView",
          "name": "Regular Expressions",
          "when": "config.cSpell.experimental.enableRegexpView"
        }
      ]
    },
    "commands": [
      {
        "command": "cSpell.addWordToWorkspaceDictionary",
        "category": "Spell",
        "title": "Add Word to Workspace Dictionary"
      },
      {
        "command": "cSpell.addWordToFolderDictionary",
        "category": "Spell",
        "title": "Add Word to Folder Dictionary"
      },
      {
        "command": "cSpell.addWordToUserDictionary",
        "category": "Spell",
        "title": "Add Word to User Dictionary"
      },
      {
        "command": "cSpell.addWordToWorkspaceSettings",
        "category": "Spell",
        "title": "Add Word to Workspace Settings"
      },
      {
        "command": "cSpell.addWordToFolderSettings",
        "category": "Spell",
        "title": "Add Word to Folder Settings"
      },
      {
        "command": "cSpell.addWordToUserSettings",
        "category": "Spell",
        "title": "Add Word to User Settings"
      },
      {
        "command": "cSpell.enableForWorkspace",
        "category": "Spell",
        "title": "Enable Spell Checking For Workspace"
      },
      {
        "command": "cSpell.disableForWorkspace",
        "category": "Spell",
        "title": "Disable Spell Checking For Workspace"
      },
      {
        "command": "cSpell.enableForGlobal",
        "category": "Spell",
        "title": "Enable Spell Checking by Default"
      },
      {
        "command": "cSpell.disableForGlobal",
        "category": "Spell",
        "title": "Disable Spell Checking by Default"
      },
      {
        "command": "cSpell.toggleEnableForGlobal",
        "category": "Spell",
        "title": "Toggle Spell Checking"
      },
      {
        "command": "cSpell.enableCurrentLanguage",
        "category": "Spell",
        "title": "Enable Spell Checking Document Language"
      },
      {
        "command": "cSpell.disableCurrentLanguage",
        "category": "Spell",
        "title": "Disable Spell Checking Document Language"
      },
      {
        "command": "cSpell.displayCSpellInfo",
        "category": "Spell",
        "title": "Show Spell Checker Configuration Info"
      },
      {
        "command": "cSpell.toggleEnableSpellChecker",
        "category": "Spell",
        "title": "Toggle Spell Checking For the Current Workspace"
      },
      {
        "command": "cSpell.removeWordFromFolderDictionary",
        "category": "Spell",
        "title": "Remove Words from the Folder Dictionary"
      },
      {
        "command": "cSpell.removeWordFromWorkspaceDictionary",
        "category": "Spell",
        "title": "Remove Words from the Workspace Dictionaries"
      },
      {
        "command": "cSpell.removeWordFromUserDictionary",
        "category": "Spell",
        "title": "Remove Words from the Global Dictionary"
      },
      {
        "command": "cSpell.logPerfTimeline",
        "category": "Spell",
        "title": "Log cSpell performance times to console"
      },
      {
        "command": "cSpell.addIgnoreWord",
        "category": "Spell",
        "title": "Ignore Word"
      },
      {
        "command": "cSpell.addIgnoreWordToFolder",
        "category": "Spell",
        "title": "Ignore Word in Folder Settings"
      },
      {
        "command": "cSpell.addIgnoreWordToWorkspace",
        "category": "Spell",
        "title": "Ignore Word in Workspace Settings"
      },
      {
        "command": "cSpell.addIgnoreWordToUser",
        "category": "Spell",
        "title": "Ignore Word in User Settings"
      },
      {
        "command": "cSpell.addWordToDictionary",
        "category": "Spell",
        "title": "Add Word to Dictionary"
      },
      {
        "command": "cSpell.addWordToCSpellConfig",
        "category": "Spell",
        "title": "Add Word to CSpell Configuration"
      },
      {
        "command": "cSpell.addIssuesToDictionary",
        "category": "Spell",
        "title": "Add All Spelling Issues to Dictionary"
      },
      {
        "command": "cSpell.createCustomDictionary",
        "category": "Spell",
        "title": "Create a Custom Dictionary File."
      },
      {
        "command": "cSpell.createCSpellConfig",
        "category": "Spell",
        "title": "Create a cSpell Configuration File."
      },
      {
        "command": "cSpellRegExpTester.testRegExp",
        "title": "Test a Regular Expression on the current document."
      },
      {
        "command": "cSpellRegExpTester.editRegExp",
        "title": "Edit",
        "icon": {
          "dark": "resources/dark/edit.svg",
          "light": "resources/light/edit.svg"
        }
      }
    ],
    "languages": [
      {
        "id": "jsonc",
        "extensions": [
          "cspell-ext.json",
          "cspell-default.json",
          "cspell.json",
          "cspell.config.json",
          "cSpell.json"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": [
          ".cspell.json",
          ".cspell.jsonc",
          "cspell-default.json",
          "cspell-ext.json",
          "cspell-import.json",
          "cspell-imports.json",
          "cspell-include.json",
          "cspell-includes.json",
          "cspell.config.json",
          "cspell.config.jsonc",
          "cspell.json",
          "cspell.jsonc",
          "cSpell.json"
        ],
        "url": "./node_modules/@cspell/cspell-types/cspell.schema.json"
      }
    ],
    "configurationDefaults": {
      "[php]": {
        "cSpell.fixSpellingWithRenameProvider": false
      }
    },
    "configuration": {
      "type": "object",
      "title": "Code Spell Checker",
      "properties": {
        "cSpell.experimental.enableRegexpView": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "description": "Show Regular Expression Explorer"
        },
        "cSpell.language": {
          "type": "string",
          "scope": "resource",
          "default": "en",
          "description": "The Language locale to use when spell checking. \"en\" and \"en-GB\" are currently supported."
        },
        "cSpell.maxNumberOfProblems": {
          "type": "number",
          "scope": "resource",
          "default": 100,
          "description": "Controls the maximum number of spelling errors per document."
        },
        "cSpell.checkLimit": {
          "type": "number",
          "scope": "resource",
          "default": 500,
          "description": "The limit in K-Characters to be checked in a file."
        },
        "cSpell.numSuggestions": {
          "type": "number",
          "scope": "resource",
          "default": 8,
          "description": "Controls the number of suggestions shown."
        },
        "cSpell.minWordLength": {
          "type": "number",
          "scope": "resource",
          "default": 4,
          "description": "The minimum length of a word before checking it against a dictionary."
        },
        "cSpell.maxDuplicateProblems": {
          "type": "number",
          "scope": "resource",
          "default": 5,
          "description": "The maximum number of times the same word can be flagged as an error in a file."
        },
        "cSpell.enableFiletypes": {
          "items": {
            "type": "string"
          },
          "markdownDescription": "Enable / Disable checking file types (languageIds).\nThese are in additional to the file types specified by `cSpell.enabledLanguageIds`.\nTo disable a language, prefix with `!` as in `!json`,\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
          "pattern": "^!?[\\w_\\-]+$",
          "scope": "resource",
          "title": "File Types to Check",
          "type": "array",
          "uniqueItems": true
        },
        "cSpell.enabledLanguageIds": {
          "title": "Enabled Language Ids",
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [
            "asciidoc",
            "c",
            "cpp",
            "csharp",
            "css",
            "git-commit",
            "go",
            "graphql",
            "handlebars",
            "haskell",
            "html",
            "jade",
            "java",
            "javascript",
            "javascriptreact",
            "json",
            "jsonc",
            "latex",
            "less",
            "markdown",
            "php",
            "plaintext",
            "python",
            "pug",
            "restructuredtext",
            "rust",
            "scala",
            "scss",
            "text",
            "typescript",
            "typescriptreact",
            "yaml",
            "yml"
          ],
          "description": "Specify file types to spell check. Use `cSpell.enableFiletypes` to Enable / Disable checking files types.",
          "markdownDescription": "Specify a list of file types to spell check. It is better to use `cSpell.enableFiletypes` to Enable / Disable checking files types.",
          "uniqueItems": true
        },
        "cSpell.import": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List of paths of cspell.json files to import."
        },
        "cSpell.words": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Words to add to dictionary for a workspace."
        },
        "cSpell.userWords": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "User words to add to dictionary.  Should only be in the user settings."
        },
        "cSpell.ignoreWords": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "A list of words to be ignored by the spell checker."
        },
        "cSpell.enabled": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "Enable / Disable the spell checker."
        },
        "cSpell.diagnosticLevel": {
          "type": "string",
          "scope": "resource",
          "enum": [
            "Error",
            "Warning",
            "Information",
            "Hint"
          ],
          "default": "Information",
          "description": "Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of squiggle."
        },
        "cSpell.showStatus": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "Display the spell checker status on the status bar."
        },
        "cSpell.showStatusAlignment": {
          "type": "string",
          "scope": "resource",
          "default": "Left",
          "enum": [
            "Left",
            "Right"
          ],
          "description": "The side of the status bar to display the spell checker status."
        },
        "cSpell.spellCheckDelayMs": {
          "type": "number",
          "default": 50,
          "description": "Delay in ms after a document has changed before checking it for spelling errors."
        },
        "cSpell.ignorePaths": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [
            "**/package-lock.json",
            "**/node_modules/**",
            "**/vscode-extension/**",
            "**/.git/objects/**",
            ".vscode",
            ".vscode-insiders"
          ],
          "description": "Specify paths/files to ignore. (Supports Globs)"
        },
        "cSpell.flagWords": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Words to always be flagged as an error."
        },
        "cSpell.patterns": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The pattern identifier."
              },
              "pattern": {
                "type": "string",
                "description": "Regular expression, default flags are: 'gim'"
              }
            },
            "description": "Define a pattern"
          },
          "default": [],
          "description": "Defines a list of named regular expression patterns that can be used in exclusion or inclusion lists."
        },
        "cSpell.ignoreRegExpList": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List of regular expressions used to exclude the matching text from being checked.\n Example: \"0x[a-f0-9]+\" to skip 0x hex values.\n By default the flags are 'gim'.\n You can specify them like this:\n \"/0x[A-F0-9]/g\" to match only upper case hex numbers.\n Example to match email: \"<?[\\\\w.\\\\-+]+@\\\\w+(\\\\.\\\\w+)+>?\" "
        },
        "cSpell.includeRegExpList": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List of regular expressions used to include text to be spell checked.\nBy default, all text is checked.  Adding regular expresses to this list will limit the text to be spell checked to only text that matches any of the expressions in the list.\nLogic: text to be checked = include - exclude\nNote: Slashes need to be double: \\\\ because it is in a json string. \nExamples:\n* \".*\" -- include everything.\n* \"'(?:[^'\\\\n]|\\\\\\\\')*'\" -- single quote strings. \n"
        },
        "cSpell.allowCompoundWords": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "Enable / Disable allowing word compounds. true means 'arraylength' would be ok, false means it would not pass."
        },
        "cSpell.languageSettings": {
          "type": "array",
          "scope": "resource",
          "description": "Define settings on a per programming language basis.",
          "items": {
            "$ref": "https://raw.githubusercontent.com/streetsidesoftware/cspell/v5.6.4/cspell.schema.json#/definitions/LanguageSetting"
          }
        },
        "cSpell.dictionaries": {
          "type": "array",
          "scope": "resource",
          "description": "List of dictionaries to use when checking files.",
          "items": {
            "type": "string",
            "description": "Name of dictionary to use."
          }
        },
        "cSpell.dictionaryDefinitions": {
          "type": "array",
          "scope": "resource",
          "description": "A List of Dictionary Definitions.",
          "items": {
            "$ref": "https://raw.githubusercontent.com/streetsidesoftware/cspell/v5.6.4/cspell.schema.json#/definitions/DictionaryDefinition"
          }
        },
        "cSpell.showCommandsInEditorContextMenu": {
          "type": "boolean",
          "scope": "application",
          "description": "Show Spell Checker actions in Editor Context Menu",
          "default": true
        },
        "cSpell.fixSpellingWithRenameProvider": {
          "type": "boolean",
          "scope": "language-overridable",
          "description": "Use Rename when fixing spelling issues.",
          "default": true
        },
        "cSpell.logLevel": {
          "type": "string",
          "scope": "window",
          "description": "Set the Debug Level for logging messages.",
          "enum": [
            "None",
            "Error",
            "Warning",
            "Information",
            "Debug"
          ],
          "default": "Error"
        },
        "cSpell.allowedSchemas": {
          "type": "array",
          "scope": "window",
          "description": "Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).",
          "items": {
            "type": "string"
          },
          "default": [
            "file",
            "gist",
            "sftp",
            "untitled"
          ]
        },
        "cSpell.overrides": {
          "type": "array",
          "description": "Overrides to apply based upon the file path.",
          "items": {
            "$ref": "https://raw.githubusercontent.com/streetsidesoftware/cspell/v5.6.4/cspell.schema.json#/definitions/OverrideSettings"
          }
        },
        "cSpell.workspaceRootPath": {
          "markdownDescription": "Define the path to the workspace root folder in a multi-root workspace.\nBy default it is the first folder.\n\nThis is used to find the `cspell.json` file for the workspace.\n\nExample: use the `client` folder\n```\n     \"cSpell.workspaceRootPath\": \"${workspaceFolder:client}\"\n```",
          "scope": "resource",
          "title": "Workspace Root Folder Path",
          "type": "string"
        },
        "cSpell.customFolderDictionaries": {
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": false,
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "name": {
                    "description": "This matches the name in a dictionary definition",
                    "markdownDescription": "The reference name of the dictionary.\nexample: `My Words` or `custom`\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "path": {
                    "description": "A File System Path",
                    "markdownDescription": "Define the path to the dictionary text file.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\nExample: relative to User's folder\n```\n~/dictionaries/custom_dictionary.txt\n```\n\nExample: relative to the `client` folder in a multi-root workspace\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\nExample: relative to the current workspace folder in a single-root workspace\nNote - this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\nExample: relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n```\n./build/custom_dictionary.txt\n```",
                    "title": "Path to Dictionary Text File",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              {
                "description": "This matches the name in a dictionary definition",
                "type": "string"
              }
            ]
          },
          "markdownDescription": "Define custom dictionaries to be included by default for the folder.\nIf `addWords` is `true` words will be added to this dictionary.",
          "scope": "resource",
          "title": "Custom Folder Dictionaries",
          "type": "array"
        },
        "cSpell.customUserDictionaries": {
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": false,
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "name": {
                    "description": "This matches the name in a dictionary definition",
                    "markdownDescription": "The reference name of the dictionary.\nexample: `My Words` or `custom`\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "path": {
                    "description": "A File System Path",
                    "markdownDescription": "Define the path to the dictionary text file.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\nExample: relative to User's folder\n```\n~/dictionaries/custom_dictionary.txt\n```\n\nExample: relative to the `client` folder in a multi-root workspace\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\nExample: relative to the current workspace folder in a single-root workspace\nNote - this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\nExample: relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n```\n./build/custom_dictionary.txt\n```",
                    "title": "Path to Dictionary Text File",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              {
                "description": "This matches the name in a dictionary definition",
                "type": "string"
              }
            ]
          },
          "markdownDescription": "Define custom dictionaries to be included by default for the user.\nIf `addWords` is `true` words will be added to this dictionary.",
          "scope": "application",
          "title": "Custom User Dictionaries",
          "type": "array"
        },
        "cSpell.customWorkspaceDictionaries": {
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": false,
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "name": {
                    "description": "This matches the name in a dictionary definition",
                    "markdownDescription": "The reference name of the dictionary.\nexample: `My Words` or `custom`\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "path": {
                    "description": "A File System Path",
                    "markdownDescription": "Define the path to the dictionary text file.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\nExample: relative to User's folder\n```\n~/dictionaries/custom_dictionary.txt\n```\n\nExample: relative to the `client` folder in a multi-root workspace\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\nExample: relative to the current workspace folder in a single-root workspace\nNote - this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\nExample: relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n```\n./build/custom_dictionary.txt\n```",
                    "title": "Path to Dictionary Text File",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              {
                "description": "This matches the name in a dictionary definition",
                "type": "string"
              }
            ]
          },
          "markdownDescription": "Define custom dictionaries to be included by default for the workspace.\nIf `addWords` is `true` words will be added to this dictionary.",
          "scope": "resource",
          "title": "Custom Workspace Dictionaries",
          "type": "array"
        }
      }
    }
  },
  "workspaces": {
    "packages": [
      "packages/*"
    ],
    "nohoist": [
      "integration-tests",
      "integration-tests/**",
      "**/@types/jest"
    ]
  },
  "scripts": {
    "postinstall": "yarn run build",
    "build": "yarn workspaces run build",
    "clean": "yarn workspaces run clean && rimraf \"packages/*/node_modules\"",
    "build-production": "yarn workspaces run build-production",
    "build-release": "yarn run build && yarn run package-extension",
    "version-prerelease": "yarn run version-release -p alpha",
    "version-release": "yarn run test-vsce-build && standard-version",
    "package-extension": "vsce package -o ./build",
    "test-vsce-build": "vsce package -o ./temp",
    "remove-test-files": "rimraf \"packages/*/{out,dist,settingsViewer}/**/*.test.js\"",
    "vscode:prepublish": "yarn run build-production && yarn run remove-test-files",
    "lint": "yarn workspaces run lint",
    "test-client-integration": "yarn workspace integration-tests test-integration",
    "test": "yarn workspaces run test",
    "update-packages": "yarn upgrade"
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^4.18.0",
    "@typescript-eslint/parser": "^4.18.0",
    "eslint": "^7.22.0",
    "prettier": "^2.2.1",
    "rimraf": "^3.0.2",
    "standard-version": "^9.1.1",
    "typescript": "^4.2.3",
    "vsce": "^1.95.0"
  },
  "dependencies": {
    "@cspell/cspell-bundled-dicts": "^5.4.0",
    "@cspell/cspell-types": "^5.4.0",
    "cosmiconfig": "^7.0.0",
    "regexp-worker": "^1.1.0"
  }
}
