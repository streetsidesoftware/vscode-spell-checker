{
  "name": "code-spell-checker",
  "description": "Spelling checker for source code",
  "displayName": "Code Spell Checker",
  "icon": "images/SpellCheck.png",
  "author": "Jason Dent",
  "license": "GPL-3.0-or-later",
  "version": "3.0.1",
  "publisher": "streetsidesoftware",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/streetsidesoftware/vscode-spell-checker"
  },
  "bugs": {
    "url": "https://github.com/streetsidesoftware/vscode-spell-checker/issues"
  },
  "homepage": "https://streetsidesoftware.github.io/vscode-spell-checker",
  "engines": {
    "node": ">18.0.0",
    "vscode": "^1.82.0"
  },
  "sponsor": {
    "url": "https://github.com/sponsors/streetsidesoftware"
  },
  "extensionKind": [
    "workspace"
  ],
  "categories": [
    "Linters",
    "Other"
  ],
  "keywords": [
    "spell",
    "checker",
    "spelling",
    "spellchecker",
    "multi-root ready"
  ],
  "qna": "marketplace",
  "activationEvents": [
    "onStartupFinished"
  ],
  "type": "commonjs",
  "main": "./packages/client/dist/extension.js",
  "contributes": {
    "virtualWorkspaces": false,
    "untrustedWorkspaces": {
      "supported": false
    },
    "menus": {
      "editor/context": [
        {
          "command": "cSpell.suggestSpellingCorrections",
          "when": "!editorReadonly && editorTextFocus && config.cSpell.showSuggestionsLinkInEditorContextMenu && cSpell.editorMenuContext.showSuggestions",
          "group": "A_cspell@000"
        },
        {
          "submenu": "cSpell.spelling",
          "group": "A_cspell@001",
          "when": "!editorReadonly && editorTextFocus && config.cSpell.showCommandsInEditorContextMenu"
        }
      ],
      "cSpell.spelling": [
        {
          "command": "cSpell.suggestSpellingCorrections",
          "when": "editorTextFocus && !config.cSpell.showSuggestionsLinkInEditorContextMenu && cSpell.editorMenuContext.showSuggestions",
          "group": "A_cspell@001"
        },
        {
          "command": "cSpell.addWordToDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToDictionary",
          "group": "A_cspell@010"
        },
        {
          "command": "cSpell.addWordToFolderDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToFolderDictionary",
          "group": "A_cspell@020"
        },
        {
          "command": "cSpell.addWordToWorkspaceDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToWorkspaceDictionary",
          "group": "A_cspell@030"
        },
        {
          "command": "cSpell.addWordToCSpellConfig",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToCSpellConfig",
          "group": "A_cspell@050"
        },
        {
          "command": "cSpell.addWordToFolderSettings",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToFolderSettings",
          "group": "A_cspell@051"
        },
        {
          "command": "cSpell.addWordToWorkspaceSettings",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToWorkspaceSettings",
          "group": "A_cspell@052"
        },
        {
          "command": "cSpell.addWordToUserDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToUserDictionary",
          "group": "A_cspell@055"
        },
        {
          "command": "cSpell.addWordToUserSettings",
          "when": "editorTextFocus && cSpell.editorMenuContext.addWordToUserSettings",
          "group": "A_cspell@056"
        },
        {
          "command": "cSpell.addIssuesToDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.addIssuesToDictionary",
          "group": "A_cspell@060"
        },
        {
          "command": "cSpell.addIgnoreWord",
          "when": "editorTextFocus && cSpell.editorMenuContext.addIgnoreWord",
          "group": "A_cspell@090"
        },
        {
          "command": "cSpell.createCSpellConfig",
          "when": "editorTextFocus && cSpell.editorMenuContext.createCSpellConfig",
          "group": "B_cspell@010"
        },
        {
          "command": "cSpell.createCustomDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.createCustomDictionary",
          "group": "B_cspell@020"
        }
      ],
      "cSpell.configMenu": [
        {
          "command": "cSpell.createCSpellConfig",
          "when": "editorTextFocus && cSpell.editorMenuContext.createCSpellConfig",
          "group": "A_cspell@010"
        },
        {
          "command": "cSpell.createCustomDictionary",
          "when": "editorTextFocus && cSpell.editorMenuContext.createCustomDictionary",
          "group": "A_cspell@070"
        }
      ],
      "commandPalette": [
        {
          "command": "cSpellRegExpTester.testRegExp",
          "when": "config.cSpell.experimental.enableRegexpView"
        },
        {
          "command": "cSpellRegExpTester.editRegExp",
          "when": "view == cSpellRegExpView"
        }
      ],
      "view/title": [
        {
          "command": "cSpell.autoFixSpellingIssues",
          "when": "view == cspell-info.issuesView",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "cSpellRegExpTester.editRegExp",
          "when": "view == cSpellRegExpView && viewItem == regexp",
          "group": "inline"
        },
        {
          "command": "cSpell.issueViewer.item.autoFixSpellingIssues",
          "when": "view == cspell-info.issuesView && viewItem == issue.hasPreferred",
          "group": "inline"
        },
        {
          "command": "cSpell.issueViewer.item.addWordToDictionary",
          "when": "view == cspell-info.issuesView && viewItem == issue",
          "group": "inline"
        }
      ]
    },
    "submenus": [
      {
        "id": "cSpell.spelling",
        "label": "Spelling"
      },
      {
        "id": "cSpell.configMenu",
        "label": "Spell Checker Configuration"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cspell-info-explorer",
          "title": "Spell Checker",
          "icon": "resources/dark/check_circle.svg"
        }
      ]
    },
    "views": {
      "cspell-info-explorer": [
        {
          "type": "tree",
          "id": "cspell-info.issuesView",
          "name": "Issues"
        },
        {
          "type": "webview",
          "id": "cspell-info.infoView",
          "name": "Spell Checker",
          "when": "config.cSpell.experimental.enableSettingsViewerV2"
        },
        {
          "type": "webview",
          "id": "cspell-info.todoView",
          "name": "Spell Checker Todos",
          "when": "config.cSpell.experimental.enableSettingsViewerV2"
        },
        {
          "id": "cSpellRegExpView",
          "name": "Regular Expressions",
          "when": "config.cSpell.experimental.enableRegexpView"
        }
      ]
    },
    "viewsWelcome": [],
    "commands": [
      {
        "command": "cspell-info.showHelloWorld",
        "title": "Hello World (Svelte): Show",
        "enablement": "config.cSpell.experimental.enableSettingsViewerV2",
        "category": "Spell"
      },
      {
        "command": "cSpell.addWordToWorkspaceDictionary",
        "category": "Spell",
        "title": "Add Words to Workspace Dictionary"
      },
      {
        "command": "cSpell.addWordToFolderDictionary",
        "category": "Spell",
        "title": "Add Words to Folder Dictionary"
      },
      {
        "command": "cSpell.addWordToUserDictionary",
        "category": "Spell",
        "title": "Add Words to User Dictionary"
      },
      {
        "command": "cSpell.addWordToWorkspaceSettings",
        "category": "Spell",
        "title": "Add Words to Workspace Settings"
      },
      {
        "command": "cSpell.addWordToFolderSettings",
        "category": "Spell",
        "title": "Add Words to Folder Settings"
      },
      {
        "command": "cSpell.addWordToUserSettings",
        "category": "Spell",
        "title": "Add Words to User Settings"
      },
      {
        "command": "cSpell.enableForWorkspace",
        "category": "Spell",
        "title": "Enable Spell Checking For Workspace"
      },
      {
        "command": "cSpell.disableForWorkspace",
        "category": "Spell",
        "title": "Disable Spell Checking For Workspace"
      },
      {
        "command": "cSpell.enableForGlobal",
        "category": "Spell",
        "title": "Enable Spell Checking by Default"
      },
      {
        "command": "cSpell.disableForGlobal",
        "category": "Spell",
        "title": "Disable Spell Checking by Default"
      },
      {
        "command": "cSpell.enableCurrentLanguage",
        "category": "Spell",
        "title": "Enable Spell Checking Document Language"
      },
      {
        "command": "cSpell.disableCurrentLanguage",
        "category": "Spell",
        "title": "Disable Spell Checking Document Language"
      },
      {
        "command": "cSpell.displayCSpellInfo",
        "category": "Spell",
        "title": "Show Spell Checker Configuration Info"
      },
      {
        "command": "cSpell.toggleEnableForGlobal",
        "category": "Spell",
        "title": "Toggle Spell Checking in User Settings"
      },
      {
        "command": "cSpell.toggleEnableForWorkspace",
        "category": "Spell",
        "title": "Toggle Spell Checking for Workspace"
      },
      {
        "command": "cSpell.toggleEnableSpellChecker",
        "category": "Spell",
        "title": "Toggle Spell Checking"
      },
      {
        "command": "cSpell.removeWordFromFolderDictionary",
        "category": "Spell",
        "title": "Remove Words from the Folder Dictionary"
      },
      {
        "command": "cSpell.removeWordFromWorkspaceDictionary",
        "category": "Spell",
        "title": "Remove Words from the Workspace Dictionaries"
      },
      {
        "command": "cSpell.removeWordFromUserDictionary",
        "category": "Spell",
        "title": "Remove Words from the Global Dictionary"
      },
      {
        "command": "cSpell.logPerfTimeline",
        "category": "Spell",
        "title": "Log CSpell performance times to console"
      },
      {
        "command": "cSpell.addIgnoreWord",
        "category": "Spell",
        "title": "Ignore Words"
      },
      {
        "command": "cSpell.addIgnoreWordsToFolder",
        "category": "Spell",
        "title": "Ignore Word in Folder Settings"
      },
      {
        "command": "cSpell.addIgnoreWordsToWorkspace",
        "category": "Spell",
        "title": "Ignore Words in Workspace Settings"
      },
      {
        "command": "cSpell.addIgnoreWordsToUser",
        "category": "Spell",
        "title": "Ignore Words in User Settings"
      },
      {
        "command": "cSpell.addWordToDictionary",
        "category": "Spell",
        "title": "Add Words to Dictionary",
        "icon": "$(book)"
      },
      {
        "command": "cSpell.addWordToCSpellConfig",
        "category": "Spell",
        "title": "Add Words to CSpell Configuration"
      },
      {
        "command": "cSpell.addIssuesToDictionary",
        "category": "Spell",
        "title": "Add All Spelling Issues to Dictionary"
      },
      {
        "command": "cSpell.createCustomDictionary",
        "category": "Spell",
        "title": "Create a Custom Dictionary File."
      },
      {
        "command": "cSpell.createCSpellConfig",
        "category": "Spell",
        "title": "Create a CSpell Configuration File."
      },
      {
        "command": "cSpell.suggestSpellingCorrections",
        "enablement": "editorTextFocus && cSpell.editorMenuContext.showSuggestions",
        "category": "Spell",
        "title": "Spelling Suggestions..."
      },
      {
        "command": "cSpell.goToNextSpellingIssue",
        "category": "Spell",
        "title": "Go to Next Spelling Issue"
      },
      {
        "command": "cSpell.goToPreviousSpellingIssue",
        "category": "Spell",
        "title": "Go to Previous Spelling Issue"
      },
      {
        "command": "cSpell.goToNextSpellingIssueAndSuggest",
        "category": "Spell",
        "title": "Go to Next Spelling Issue and Suggest"
      },
      {
        "command": "cSpell.goToPreviousSpellingIssueAndSuggest",
        "category": "Spell",
        "title": "Go to Previous Spelling Issue and Suggest"
      },
      {
        "command": "cSpellRegExpTester.testRegExp",
        "title": "Test a Regular Expression on the current document.",
        "enablement": "config.cSpell.experimental.enableRegexpView"
      },
      {
        "command": "cSpellRegExpTester.editRegExp",
        "title": "Edit",
        "icon": "$(edit)",
        "enablement": "config.cSpell.experimental.enableRegexpView"
      },
      {
        "command": "cSpell.autoFixSpellingIssues",
        "title": "Fix all issues with a preferred suggestion in the current document.",
        "icon": "$(lightbulb-autofix)"
      },
      {
        "command": "cSpell.issueViewer.item.openSuggestionsForIssue",
        "title": "Show Suggestions",
        "icon": "$(list-unordered)",
        "enablement": "view == cspell-info.issuesView"
      },
      {
        "command": "cSpell.issueViewer.item.autoFixSpellingIssues",
        "title": "Fix issue with preferred suggestion in the current document.",
        "icon": "$(lightbulb-autofix)",
        "enablement": "view == cspell-info.issuesView"
      },
      {
        "command": "cSpell.issueViewer.item.addWordToDictionary",
        "category": "Spell",
        "title": "Add Word to Dictionary",
        "icon": "$(book)",
        "enablement": "view == cspell-info.issuesView"
      }
    ],
    "languages": [
      {
        "id": "jsonc",
        "extensions": [
          "cspell-ext.json",
          "cspell-default.json",
          "cspell.json",
          "cspell.config.json",
          "cSpell.json"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": [
          ".cspell.config.json",
          ".cspell.config.jsonc",
          ".cspell.json",
          ".cspell.jsonc",
          "cspell-default.json",
          "cspell-ext.json",
          "cspell-import.json",
          "cspell-imports.json",
          "cspell-include.json",
          "cspell-includes.json",
          "cspell.config.json",
          "cspell.config.jsonc",
          "cspell.json",
          "cspell.jsonc",
          "cSpell.json"
        ],
        "url": "./node_modules/@cspell/cspell-types/cspell.schema.json"
      }
    ],
    "configurationDefaults": {
      "[markdown]": {
        "cSpell.fixSpellingWithRenameProvider": true,
        "cSpell.advanced.feature.useReferenceProviderWithRename": true,
        "cSpell.advanced.feature.useReferenceProviderRemove": "/^#+\\s/"
      },
      "[scss]": {
        "cSpell.fixSpellingWithRenameProvider": false
      },
      "[css]": {
        "cSpell.fixSpellingWithRenameProvider": false
      },
      "[scminput]": {
        "cSpell.fixSpellingWithRenameProvider": false
      }
    },
    "configuration": [
      {
        "additionalProperties": false,
        "order": 0,
        "properties": {
          "cSpell.enabled": {
            "default": true,
            "markdownDescription": "Enable / Disable the spell checker.",
            "scope": "resource",
            "type": "boolean"
          }
        },
        "title": "Code Spell Checker",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 18,
        "properties": {
          "cSpell.advanced.feature.useReferenceProviderRemove": {
            "markdownDescription": "Used to work around bugs in Reference Providers and Rename Providers.\nAnything matching the provided Regular Expression will be removed from the text\nbefore sending it to the Rename Provider.\n\nSee: [Markdown: Fixing spelling issues in Header sections changes the entire line · Issue #1987](https://github.com/streetsidesoftware/vscode-spell-checker/issues/1987)\n\nIt is unlikely that you would need to edit this setting. If you need to, please open an issue at\n[Spell Checker Issues](https://github.com/streetsidesoftware/vscode-spell-checker/issues)\n\nThis feature is used in connection with `#cSpell.advanced.feature.useReferenceProviderWithRename#`",
            "scope": "language-overridable",
            "title": "Remove Matching Characters Before Rename",
            "type": "string"
          },
          "cSpell.advanced.feature.useReferenceProviderWithRename": {
            "default": false,
            "markdownDescription": "Use the Reference Provider when fixing spelling issues with the Rename Provider.\nThis feature is used in connection with `#cSpell.fixSpellingWithRenameProvider#`",
            "scope": "language-overridable",
            "title": "Use Reference Provider During Rename",
            "type": "boolean"
          },
          "cSpell.fixSpellingWithRenameProvider": {
            "default": true,
            "markdownDescription": "Use Rename Provider when fixing spelling issues.",
            "scope": "language-overridable",
            "type": "boolean"
          },
          "cSpell.logFile": {
            "markdownDescription": "Have the logs written to a file instead of to VS Code.",
            "scope": "window",
            "title": "Write Logs to a File",
            "type": "string"
          },
          "cSpell.logLevel": {
            "default": "Error",
            "enum": [
              "None",
              "Error",
              "Warning",
              "Information",
              "Debug"
            ],
            "enumDescriptions": [
              "Do not log",
              "Log only errors",
              "Log errors and warnings",
              "Log errors, warnings, and info",
              "Log everything (noisy)"
            ],
            "markdownDescription": "Set the Debug Level for logging messages.",
            "scope": "window",
            "title": "Set Logging Level",
            "type": "string"
          }
        },
        "title": "Advanced",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 5,
        "properties": {
          "cSpell.ignoreRegExpList": {
            "items": {
              "markdownDescription": "A PatternRef is a Pattern or PatternId.",
              "type": "string"
            },
            "markdownDescription": "List of regular expressions or Pattern names (defined in `#cSpell.patterns#`) to exclude from spell checking.\n\n- When using the VS Code Preferences UI, it is not necessary to escape the `\\`, VS Code takes care of that.\n- When editing the VS Code `settings.json` file,\n  it is necessary to escape `\\`.\n  Each `\\` becomes `\\\\`.\n\nThe default regular expression flags are `gi`. Add `u` (`gui`), to enable Unicode.\n\n| VS Code UI          | settings.json         | Description                                  |\n| :------------------ | :-------------------- | :------------------------------------------- |\n| `/\\\\[a-z]+/gi`      | `/\\\\\\\\[a-z]+/gi`      | Exclude LaTeX command like `\\mapsto`         |\n| `/\\b[A-Z]{3,5}\\b/g` | `/\\\\b[A-Z]{3,5}\\\\b/g` | Exclude full-caps acronyms of 3-5 length.    |\n| `CStyleComment`     | `CStyleComment`       | A built in pattern                           |",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.includeRegExpList": {
            "items": {
              "markdownDescription": "A PatternRef is a Pattern or PatternId.",
              "type": "string"
            },
            "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.overrides": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "allowCompoundWords": {
                  "default": false,
                  "markdownDescription": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                  "type": "boolean"
                },
                "caseSensitive": {
                  "default": false,
                  "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                  "type": "boolean"
                },
                "description": {
                  "markdownDescription": "Optional description of configuration.",
                  "type": "string"
                },
                "diagnosticLevel": {
                  "default": "Information",
                  "enum": [
                    "Error",
                    "Warning",
                    "Information",
                    "Hint"
                  ],
                  "enumDescriptions": [
                    "Report Spelling Issues as Errors",
                    "Report Spelling Issues as Warnings",
                    "Report Spelling Issues as Information",
                    "Report Spelling Issues as Hints, will not show up in Problems"
                  ],
                  "markdownDescription": "Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle.",
                  "scope": "resource",
                  "title": "Set Diagnostic Reporting Level",
                  "type": "string"
                },
                "diagnosticLevelFlaggedWords": {
                  "enum": [
                    "Error",
                    "Warning",
                    "Information",
                    "Hint"
                  ],
                  "enumDescriptions": [
                    "Report Spelling Issues as Errors",
                    "Report Spelling Issues as Warnings",
                    "Report Spelling Issues as Information",
                    "Report Spelling Issues as Hints, will not show up in Problems"
                  ],
                  "markdownDescription": "Flagged word issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle.\nBy default, flagged words will use the same diagnostic level as general issues. Use this setting to customize them.",
                  "scope": "resource",
                  "title": "Set Diagnostic Reporting Level for Flagged Words",
                  "type": "string",
                  "version": "4.0.0"
                },
                "dictionaries": {
                  "items": {
                    "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                    "type": "string"
                  },
                  "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                  "type": "array"
                },
                "dictionaryDefinitions": {
                  "items": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "addWords": {
                            "default": true,
                            "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                            "title": "Add Words to Dictionary",
                            "type": "boolean"
                          },
                          "description": {
                            "markdownDescription": "Optional: A human readable description.",
                            "title": "Description of the Dictionary",
                            "type": "string"
                          },
                          "name": {
                            "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "title": "Name of Dictionary",
                            "type": "string"
                          },
                          "noSuggest": {
                            "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                            "type": "boolean"
                          },
                          "path": {
                            "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                            "type": "string"
                          },
                          "scope": {
                            "anyOf": [
                              {
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "markdownDescription": "Specifies the scope of a dictionary.",
                                "type": "string"
                              },
                              {
                                "items": {
                                  "enum": [
                                    "user",
                                    "workspace",
                                    "folder"
                                  ],
                                  "markdownDescription": "Specifies the scope of a dictionary.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            ],
                            "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                            "title": "Scope of dictionary"
                          }
                        },
                        "required": [
                          "name",
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "description": {
                            "markdownDescription": "Optional description.",
                            "type": "string"
                          },
                          "name": {
                            "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                            "type": "string"
                          },
                          "noSuggest": {
                            "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                            "type": "boolean"
                          },
                          "path": {
                            "markdownDescription": "Path to the file.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "path",
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "addWords": {
                            "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                            "type": "boolean"
                          },
                          "description": {
                            "markdownDescription": "Optional description.",
                            "type": "string"
                          },
                          "name": {
                            "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                            "type": "string"
                          },
                          "noSuggest": {
                            "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                            "type": "boolean"
                          },
                          "path": {
                            "markdownDescription": "Path to custom dictionary text file.",
                            "type": "string"
                          },
                          "scope": {
                            "anyOf": [
                              {
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "markdownDescription": "Specifies the scope of a dictionary.",
                                "type": "string"
                              },
                              {
                                "items": {
                                  "enum": [
                                    "user",
                                    "workspace",
                                    "folder"
                                  ],
                                  "markdownDescription": "Specifies the scope of a dictionary.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            ],
                            "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                          }
                        },
                        "required": [
                          "path",
                          "addWords",
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "markdownDescription": "Define custom dictionaries..\nIf `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js\n\"cSpell.dictionaryDefinitions\": [\n  {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n]\n```",
                  "scope": "resource",
                  "title": "Dictionary Definitions",
                  "type": "array"
                },
                "enableFiletypes": {
                  "items": {
                    "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                    "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                    "type": "string"
                  },
                  "markdownDescription": "Enable / Disable checking file types (languageIds).\n\nThese are in additional to the file types specified by `cSpell.enabledLanguageIds`.\n\nTo disable a language, prefix with `!` as in `!json`,\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
                  "scope": "resource",
                  "title": "File Types to Check",
                  "type": "array",
                  "uniqueItems": true
                },
                "enabled": {
                  "default": true,
                  "markdownDescription": "Is the spell checker enabled.",
                  "type": "boolean"
                },
                "enabledLanguageIds": {
                  "items": {
                    "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                    "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                    "type": "string"
                  },
                  "markdownDescription": "languageIds for the files to spell check.",
                  "type": "array"
                },
                "filename": {
                  "anyOf": [
                    {
                      "markdownDescription": "These are glob expressions.",
                      "type": "string"
                    },
                    {
                      "items": {
                        "markdownDescription": "These are glob expressions.",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "markdownDescription": "Glob pattern or patterns to match against."
                },
                "flagWords": {
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                  "type": "array"
                },
                "id": {
                  "markdownDescription": "Optional identifier.",
                  "type": "string"
                },
                "ignoreRegExpList": {
                  "items": {
                    "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                    "type": "string"
                  },
                  "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                  "type": "array"
                },
                "ignoreWords": {
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                  "type": "array"
                },
                "includeRegExpList": {
                  "items": {
                    "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                    "type": "string"
                  },
                  "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                  "type": "array"
                },
                "language": {
                  "markdownDescription": "Sets the locale.",
                  "type": "string"
                },
                "languageId": {
                  "anyOf": [
                    {
                      "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                      "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                      "type": "string"
                    },
                    {
                      "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                      "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                      "type": "string"
                    },
                    {
                      "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                      "pattern": "^(![-\\w_\\s]+)(,![-\\w_\\s]+)*$",
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "markdownDescription": "Sets the programming language id to match file type."
                },
                "languageSettings": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "allowCompoundWords": {
                        "default": false,
                        "markdownDescription": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                        "type": "boolean"
                      },
                      "caseSensitive": {
                        "default": false,
                        "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional description of configuration.",
                        "type": "string"
                      },
                      "dictionaries": {
                        "items": {
                          "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                          "type": "string"
                        },
                        "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                        "type": "array"
                      },
                      "dictionaryDefinitions": {
                        "items": {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "addWords": {
                                  "default": true,
                                  "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                                  "title": "Add Words to Dictionary",
                                  "type": "boolean"
                                },
                                "description": {
                                  "markdownDescription": "Optional: A human readable description.",
                                  "title": "Description of the Dictionary",
                                  "type": "string"
                                },
                                "name": {
                                  "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                                  "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                  "title": "Name of Dictionary",
                                  "type": "string"
                                },
                                "noSuggest": {
                                  "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                                  "type": "boolean"
                                },
                                "path": {
                                  "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                                  "type": "string"
                                },
                                "scope": {
                                  "anyOf": [
                                    {
                                      "enum": [
                                        "user",
                                        "workspace",
                                        "folder"
                                      ],
                                      "markdownDescription": "Specifies the scope of a dictionary.",
                                      "type": "string"
                                    },
                                    {
                                      "items": {
                                        "enum": [
                                          "user",
                                          "workspace",
                                          "folder"
                                        ],
                                        "markdownDescription": "Specifies the scope of a dictionary.",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  ],
                                  "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                                  "title": "Scope of dictionary"
                                }
                              },
                              "required": [
                                "name",
                                "path"
                              ],
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "description": {
                                  "markdownDescription": "Optional description.",
                                  "type": "string"
                                },
                                "name": {
                                  "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                  "type": "string"
                                },
                                "noSuggest": {
                                  "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                                  "type": "boolean"
                                },
                                "path": {
                                  "markdownDescription": "Path to the file.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "path",
                                "name"
                              ],
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "addWords": {
                                  "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                                  "type": "boolean"
                                },
                                "description": {
                                  "markdownDescription": "Optional description.",
                                  "type": "string"
                                },
                                "name": {
                                  "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                  "type": "string"
                                },
                                "noSuggest": {
                                  "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                                  "type": "boolean"
                                },
                                "path": {
                                  "markdownDescription": "Path to custom dictionary text file.",
                                  "type": "string"
                                },
                                "scope": {
                                  "anyOf": [
                                    {
                                      "enum": [
                                        "user",
                                        "workspace",
                                        "folder"
                                      ],
                                      "markdownDescription": "Specifies the scope of a dictionary.",
                                      "type": "string"
                                    },
                                    {
                                      "items": {
                                        "enum": [
                                          "user",
                                          "workspace",
                                          "folder"
                                        ],
                                        "markdownDescription": "Specifies the scope of a dictionary.",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  ],
                                  "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                                }
                              },
                              "required": [
                                "path",
                                "addWords",
                                "name"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "markdownDescription": "Define custom dictionaries..\nIf `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js\n\"cSpell.dictionaryDefinitions\": [\n  {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n]\n```",
                        "scope": "resource",
                        "title": "Dictionary Definitions",
                        "type": "array"
                      },
                      "enabled": {
                        "default": true,
                        "markdownDescription": "Is the spell checker enabled.",
                        "type": "boolean"
                      },
                      "flagWords": {
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                        "type": "array"
                      },
                      "id": {
                        "markdownDescription": "Optional identifier.",
                        "type": "string"
                      },
                      "ignoreRegExpList": {
                        "items": {
                          "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                          "type": "string"
                        },
                        "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                        "type": "array"
                      },
                      "ignoreWords": {
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                        "type": "array"
                      },
                      "includeRegExpList": {
                        "items": {
                          "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                          "type": "string"
                        },
                        "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                        "type": "array"
                      },
                      "languageId": {
                        "anyOf": [
                          {
                            "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                            "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                            "type": "string"
                          },
                          {
                            "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                            "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                            "type": "string"
                          },
                          {
                            "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                            "pattern": "^(![-\\w_\\s]+)(,![-\\w_\\s]+)*$",
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "The language id.  Ex: \"typescript\", \"html\", or \"php\".  \"*\" -- will match all languages."
                      },
                      "locale": {
                        "anyOf": [
                          {
                            "markdownDescription": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "markdownDescription": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
                      },
                      "name": {
                        "markdownDescription": "Optional name of configuration.",
                        "type": "string"
                      },
                      "noSuggestDictionaries": {
                        "items": {
                          "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                          "type": "string"
                        },
                        "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                        "type": "array"
                      },
                      "patterns": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "markdownDescription": "Description of the pattern.",
                              "type": "string"
                            },
                            "name": {
                              "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                              "type": "string"
                            },
                            "pattern": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              ],
                              "markdownDescription": "RegExp pattern or array of RegExp patterns."
                            }
                          },
                          "required": [
                            "name",
                            "pattern"
                          ],
                          "type": "object"
                        },
                        "markdownDescription": "Defines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*​/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\nDefines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.",
                        "type": "array"
                      },
                      "suggestWords": {
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                        "type": "array"
                      },
                      "words": {
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "List of words to be considered correct.",
                        "type": "array"
                      }
                    },
                    "required": [
                      "languageId"
                    ],
                    "type": "object"
                  },
                  "markdownDescription": "Additional settings for individual programming languages and locales.",
                  "scope": "resource",
                  "type": "array"
                },
                "loadDefaultConfiguration": {
                  "default": true,
                  "markdownDescription": "By default, the bundled dictionary configurations are loaded. Explicitly setting this to `false`\nwill prevent ALL default configuration from being loaded.",
                  "type": "boolean"
                },
                "maxDuplicateProblems": {
                  "default": 5,
                  "markdownDescription": "The maximum number of times the same word can be flagged as an error in a file.",
                  "type": "number"
                },
                "maxNumberOfProblems": {
                  "default": 10000,
                  "markdownDescription": "The maximum number of problems to report in a file.",
                  "type": "number"
                },
                "minWordLength": {
                  "default": 4,
                  "markdownDescription": "The minimum length of a word before checking it against a dictionary.",
                  "type": "number"
                },
                "name": {
                  "markdownDescription": "Optional name of configuration.",
                  "type": "string"
                },
                "noSuggestDictionaries": {
                  "items": {
                    "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                    "type": "string"
                  },
                  "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                  "type": "array"
                },
                "numSuggestions": {
                  "default": 10,
                  "markdownDescription": "Number of suggestions to make.",
                  "type": "number"
                },
                "patterns": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "description": {
                        "markdownDescription": "Description of the pattern.",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                        "type": "string"
                      },
                      "pattern": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "RegExp pattern or array of RegExp patterns."
                      }
                    },
                    "required": [
                      "name",
                      "pattern"
                    ],
                    "type": "object"
                  },
                  "markdownDescription": "Defines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*​/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\nDefines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.",
                  "type": "array"
                },
                "pnpFiles": {
                  "default": [
                    ".pnp.js",
                    ".pnp.cjs"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "The PnP files to search for. Note: `.mjs` files are not currently supported.",
                  "type": "array"
                },
                "suggestWords": {
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                  "type": "array"
                },
                "suggestionNumChanges": {
                  "default": 3,
                  "markdownDescription": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
                  "type": "number"
                },
                "suggestionsTimeout": {
                  "default": 500,
                  "markdownDescription": "The maximum amount of time in milliseconds to generate suggestions for a word.",
                  "type": "number"
                },
                "usePnP": {
                  "default": false,
                  "markdownDescription": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading\npackages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence\nof a PnP file and load it.",
                  "type": "boolean"
                },
                "words": {
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "List of words to be considered correct.",
                  "type": "array"
                }
              },
              "required": [
                "filename"
              ],
              "type": "object"
            },
            "markdownDescription": "Overrides are used to apply settings for specific files in your project.\n\n**Example:**\n\n```jsonc\n\"cSpell.overrides\": [\n  // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:\n  {\n    \"filename\": \"**​/{*.hrr,*.crr}\",\n    \"languageId\": \"cpp\"\n  },\n  // Force `dutch/**​/*.txt` to be treated as Dutch (dictionary needs to be installed separately):\n  {\n    \"filename\": \"**​/dutch/**​/*.txt\",\n    \"language\": \"nl\"\n  }\n]\n```",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.patterns": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "description": {
                  "markdownDescription": "Description of the pattern.",
                  "type": "string"
                },
                "name": {
                  "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                  "type": "string"
                },
                "pattern": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "markdownDescription": "RegExp pattern or array of RegExp patterns."
                }
              },
              "required": [
                "name",
                "pattern"
              ],
              "type": "object"
            },
            "markdownDescription": "Defines a list of patterns that can be used with the `#cSpell.ignoreRegExpList#` and\n`#cSpell.includeRegExpList#` options.\n\n**Example:**\n\n```jsonc\n\"cSpell.patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*​/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  }\n]\n```",
            "scope": "resource",
            "type": "array"
          }
        },
        "title": "CSpell",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 19,
        "properties": {
          "cSpell.experimental.enableRegexpView": {
            "default": false,
            "markdownDescription": "Show Regular Expression Explorer",
            "scope": "application",
            "type": "boolean"
          },
          "cSpell.experimental.enableSettingsViewerV2": {
            "default": false,
            "markdownDescription": "Enable the Settings Viewer V2 Extension",
            "scope": "application",
            "type": "boolean"
          }
        },
        "title": "Experimental",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 3,
        "properties": {
          "cSpell.allowedSchemas": {
            "default": [
              "file",
              "gist",
              "repo",
              "sftp",
              "untitled",
              "vscode-notebook-cell",
              "vscode-scm",
              "vscode-userdata"
            ],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).\n\n\nSome schemas have special meaning like:\n- `untitled` - Used for new documents that have not yet been saved\n- `vscode-notebook-cell` - Used for validating segments of a Notebook.\n- `vscode-userdata` - Needed to spell check `.code-snippets`\n- `vscode-scm` - Needed to spell check Source Control commit messages.",
            "scope": "window",
            "title": "Define Allowed Schemas",
            "type": "array"
          },
          "cSpell.checkOnlyEnabledFileTypes": {
            "default": true,
            "markdownDescription": "By default, the spell checker checks only enabled file types. Use `#cSpell.enableFiletypes#`\nto turn on / off various file types.\n\nWhen this setting is `false`, all file types are checked except for the ones disabled by `#cSpell.enableFiletypes#`.\nSee `#cSpell.enableFiletypes#` on how to disable a file type.",
            "scope": "resource",
            "title": "Check Only Enabled File Types",
            "type": "boolean"
          },
          "cSpell.enableFiletypes": {
            "items": {
              "markdownDescription": "Enable / Disable checking file types (languageIds).\nTo disable a language, prefix with `!` as in `!json`,\n\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
              "pattern": "(^!*(?!\\s)[\\s\\w_.\\-]+$)|(^!*[*]$)",
              "patternErrorMessage": "Allowed characters are `a-zA-Z`, `.`, `-`, `_` and space.",
              "type": "string"
            },
            "markdownDescription": "Enable / Disable checking file types (languageIds).\n\nThese are in additional to the file types specified by `#cSpell.enabledLanguageIds#`.\nTo disable a language, prefix with `!` as in `!json`,\n\n\n**Example: individual file types**\n\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```\n\n**Example: enable all file types**\n\n```\n*           // enable checking for all file types\n!json       // except for json\n```",
            "scope": "resource",
            "title": "File Types to Check",
            "type": "array",
            "uniqueItems": true
          },
          "cSpell.files": {
            "items": {
              "markdownDescription": "These are glob expressions.",
              "type": "string"
            },
            "markdownDescription": "Glob patterns of files to be checked.\nGlob patterns are relative to the `#cSpell.globRoot#` of the configuration file that defines them.",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.globRoot": {
            "markdownDescription": "The root to use for glob patterns found in this configuration.\nDefault: The current workspace folder.\nUse `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file.\nDefining globRoot, does not impact imported configurations.\n\nSpecial Values:\n\n- `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\n- `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.",
            "scope": "resource",
            "type": "string"
          },
          "cSpell.ignorePaths": {
            "default": [
              "package-lock.json",
              "node_modules",
              "vscode-extension",
              ".git/objects",
              ".vscode",
              ".vscode-insiders"
            ],
            "items": {
              "markdownDescription": "Simple Glob string, the root will be globRoot.",
              "type": "string"
            },
            "markdownDescription": "Glob patterns of files to be ignored. The patterns are relative to the `#cSpell.globRoot#` of the configuration file that defines them.",
            "scope": "resource",
            "title": "Glob patterns of files to be ignored",
            "type": "array"
          },
          "cSpell.import": {
            "items": {
              "markdownDescription": "A File System Path. Relative paths are relative to the configuration file.",
              "type": "string"
            },
            "markdownDescription": "Allows this configuration to inherit configuration for one or more other files.\n\nSee [Importing / Extending Configuration](https://cspell.org/configuration/imports/) for more details.",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.mergeCSpellSettings": {
            "default": false,
            "markdownDescription": "Specify if fields from `.vscode/settings.json` are passed to the spell checker.\nThis only applies when there is a CSpell configuration file in the workspace.\n\nThe purpose of this setting to help provide a consistent result compared to the\nCSpell spell checker command line tool.\n\nValues:\n- `true` - all settings will be merged based upon `#cSpell.mergeCSpellSettingsFields#`.\n- `false` - only use `.vscode/settings.json` if a CSpell configuration is not found.\n\nNote: this setting is used in conjunction with `#cSpell.mergeCSpellSettingsFields#`.",
            "scope": "resource",
            "type": "boolean",
            "version": "4.0.0"
          },
          "cSpell.mergeCSpellSettingsFields": {
            "additionalProperties": false,
            "default": {
              "allowCompoundWords": true,
              "caseSensitive": true,
              "dictionaries": true,
              "dictionaryDefinitions": true,
              "enableGlobDot": true,
              "features": true,
              "files": true,
              "flagWords": true,
              "gitignoreRoot": true,
              "globRoot": true,
              "ignorePaths": true,
              "ignoreRegExpList": true,
              "ignoreWords": true,
              "import": true,
              "includeRegExpList": true,
              "language": true,
              "languageId": true,
              "languageSettings": true,
              "loadDefaultConfiguration": true,
              "minWordLength": true,
              "noConfigSearch": true,
              "noSuggestDictionaries": true,
              "numSuggestions": true,
              "overrides": true,
              "patterns": true,
              "pnpFiles": true,
              "reporters": true,
              "suggestWords": true,
              "useGitignore": true,
              "usePnP": true,
              "userWords": true,
              "validateDirectives": true,
              "words": true
            },
            "markdownDescription": "Specify which fields from `.vscode/settings.json` are passed to the spell checker.\nThis only applies when there is a CSpell configuration file in the workspace and\n`#cSpell.mergeCSpellSettings#` is `true`.\n\nValues:\n- `{ flagWords: true, userWords: false }` - Always allow `flagWords`, but never allow `userWords`.\n\nExample:\n```jsonc\n\"cSpell.mergeCSpellSettingsFields\": { \"userWords\": false }\n```",
            "properties": {
              "allowCompoundWords": {
                "type": "boolean"
              },
              "caseSensitive": {
                "type": "boolean"
              },
              "dictionaries": {
                "type": "boolean"
              },
              "dictionaryDefinitions": {
                "type": "boolean"
              },
              "enableGlobDot": {
                "type": "boolean"
              },
              "features": {
                "type": "boolean"
              },
              "files": {
                "type": "boolean"
              },
              "flagWords": {
                "type": "boolean"
              },
              "gitignoreRoot": {
                "type": "boolean"
              },
              "globRoot": {
                "type": "boolean"
              },
              "ignorePaths": {
                "type": "boolean"
              },
              "ignoreRegExpList": {
                "type": "boolean"
              },
              "ignoreWords": {
                "type": "boolean"
              },
              "import": {
                "type": "boolean"
              },
              "includeRegExpList": {
                "type": "boolean"
              },
              "language": {
                "type": "boolean"
              },
              "languageId": {
                "type": "boolean"
              },
              "languageSettings": {
                "type": "boolean"
              },
              "loadDefaultConfiguration": {
                "type": "boolean"
              },
              "minWordLength": {
                "type": "boolean"
              },
              "noConfigSearch": {
                "type": "boolean"
              },
              "noSuggestDictionaries": {
                "type": "boolean"
              },
              "numSuggestions": {
                "type": "boolean"
              },
              "overrides": {
                "type": "boolean"
              },
              "patterns": {
                "type": "boolean"
              },
              "pnpFiles": {
                "type": "boolean"
              },
              "reporters": {
                "type": "boolean"
              },
              "suggestWords": {
                "type": "boolean"
              },
              "useGitignore": {
                "type": "boolean"
              },
              "usePnP": {
                "type": "boolean"
              },
              "userWords": {
                "type": "boolean"
              },
              "validateDirectives": {
                "type": "boolean"
              },
              "words": {
                "type": "boolean"
              }
            },
            "scope": "resource",
            "type": "object",
            "version": "4.0.0"
          },
          "cSpell.noConfigSearch": {
            "markdownDescription": "Prevents searching for local configuration when checking individual documents.",
            "scope": "resource",
            "type": "boolean"
          },
          "cSpell.spellCheckOnlyWorkspaceFiles": {
            "default": false,
            "markdownDescription": "Only spell check files that are in the currently open workspace.\nThis same effect can be achieved using the `#cSpell.files#` setting.\n\n\n```js\n\"cSpell.files\": [\"/**\"]\n```",
            "scope": "window",
            "title": "Spell Check Only Workspace Files",
            "type": "boolean"
          },
          "cSpell.useGitignore": {
            "default": true,
            "markdownDescription": "Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.",
            "scope": "resource",
            "type": "boolean"
          },
          "cSpell.usePnP": {
            "markdownDescription": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading\npackages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence\nof a PnP file and load it.",
            "scope": "resource",
            "type": "boolean"
          },
          "cSpell.workspaceRootPath": {
            "markdownDescription": "Define the path to the workspace root folder in a multi-root workspace.\nBy default it is the first folder.\n\nThis is used to find the `cspell.json` file for the workspace.\n\n\n**Example: use the `client` folder**\n```\n${workspaceFolder:client}\n```",
            "scope": "resource",
            "title": "Workspace Root Folder Path",
            "type": "string"
          }
        },
        "title": "Files, Folders, and Workspaces",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 1,
        "properties": {
          "cSpell.caseSensitive": {
            "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n  Note: Some languages like Portuguese have case sensitivity turned on by default.\n  You must use `#cSpell.languageSettings#` to turn it off.\n- `true` - Case and accents are enforced by default.",
            "scope": "resource",
            "type": "boolean"
          },
          "cSpell.customDictionaries": {
            "additionalProperties": {
              "anyOf": [
                {
                  "title": "Named dictionary to be enabled / disabled\n- `true` - turn on the named dictionary\n- `false` - turn off the named dictionary",
                  "type": "boolean"
                },
                {
                  "additionalProperties": false,
                  "markdownDescription": "Define a custom dictionary to be included.",
                  "properties": {
                    "addWords": {
                      "default": true,
                      "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                      "title": "Add Words to Dictionary",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional: A human readable description.",
                      "title": "Description of the Dictionary",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                      "title": "Name of Dictionary",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                      "title": "Path to Dictionary Text File",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                      "title": "Scope of dictionary"
                    }
                  },
                  "title": "Custom Dictionary Entry",
                  "type": "object"
                }
              ]
            },
            "markdownDescription": "Define custom dictionaries to be included by default.\nIf `addWords` is `true` words will be added to this dictionary.\n\n\n**Example:**\n\n```js\n\"cSpell.customDictionaries\": {\n  \"project-words\": {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  },\n  \"custom\": true, // Enable the `custom` dictionary\n  \"internal-terms\": false // Disable the `internal-terms` dictionary\n}\n```",
            "scope": "resource",
            "title": "Custom Dictionaries",
            "type": "object"
          },
          "cSpell.dictionaries": {
            "items": {
              "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
              "type": "string"
            },
            "markdownDescription": "Optional list of dictionaries to use.\n\nEach entry should match the name of the dictionary.\n\nTo remove a dictionary from the list add `!` before the name.\ni.e. `!typescript` will turn off the dictionary with the name `typescript`.\n\n\nExample:\n\n```jsonc\n// Enable `lorem-ipsum` and disable `typescript`\n\"cSpell.dictionaries\": [\"lorem-ipsum\", \"!typescript\"]\n```",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.dictionaryDefinitions": {
            "items": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "addWords": {
                      "default": true,
                      "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                      "title": "Add Words to Dictionary",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional: A human readable description.",
                      "title": "Description of the Dictionary",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "title": "Name of Dictionary",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                      "title": "Scope of dictionary"
                    }
                  },
                  "required": [
                    "name",
                    "path"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "markdownDescription": "Optional description.",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Path to the file.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "path",
                    "name"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "addWords": {
                      "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional description.",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Path to custom dictionary text file.",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                    }
                  },
                  "required": [
                    "path",
                    "addWords",
                    "name"
                  ],
                  "type": "object"
                }
              ]
            },
            "markdownDescription": "Define custom dictionaries..\nIf `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js\n\"cSpell.dictionaryDefinitions\": [\n  {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n]\n```",
            "scope": "resource",
            "title": "Dictionary Definitions",
            "type": "array"
          },
          "cSpell.flagWords": {
            "items": {
              "type": "string"
            },
            "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.ignoreWords": {
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of words to be ignored by the spell checker.",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.language": {
            "default": "en",
            "markdownDescription": "Current active spelling language.\n\nExample: \"en-GB\" for British English\n\nExample: \"en,nl\" to enable both English and Dutch",
            "scope": "resource",
            "type": "string"
          },
          "cSpell.languageSettings": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "allowCompoundWords": {
                  "default": false,
                  "markdownDescription": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                  "type": "boolean"
                },
                "caseSensitive": {
                  "default": false,
                  "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                  "type": "boolean"
                },
                "description": {
                  "markdownDescription": "Optional description of configuration.",
                  "type": "string"
                },
                "dictionaries": {
                  "items": {
                    "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                    "type": "string"
                  },
                  "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                  "type": "array"
                },
                "dictionaryDefinitions": {
                  "items": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "addWords": {
                            "default": true,
                            "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                            "title": "Add Words to Dictionary",
                            "type": "boolean"
                          },
                          "description": {
                            "markdownDescription": "Optional: A human readable description.",
                            "title": "Description of the Dictionary",
                            "type": "string"
                          },
                          "name": {
                            "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "title": "Name of Dictionary",
                            "type": "string"
                          },
                          "noSuggest": {
                            "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                            "type": "boolean"
                          },
                          "path": {
                            "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                            "type": "string"
                          },
                          "scope": {
                            "anyOf": [
                              {
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "markdownDescription": "Specifies the scope of a dictionary.",
                                "type": "string"
                              },
                              {
                                "items": {
                                  "enum": [
                                    "user",
                                    "workspace",
                                    "folder"
                                  ],
                                  "markdownDescription": "Specifies the scope of a dictionary.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            ],
                            "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                            "title": "Scope of dictionary"
                          }
                        },
                        "required": [
                          "name",
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "description": {
                            "markdownDescription": "Optional description.",
                            "type": "string"
                          },
                          "name": {
                            "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                            "type": "string"
                          },
                          "noSuggest": {
                            "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                            "type": "boolean"
                          },
                          "path": {
                            "markdownDescription": "Path to the file.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "path",
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "addWords": {
                            "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                            "type": "boolean"
                          },
                          "description": {
                            "markdownDescription": "Optional description.",
                            "type": "string"
                          },
                          "name": {
                            "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                            "type": "string"
                          },
                          "noSuggest": {
                            "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                            "type": "boolean"
                          },
                          "path": {
                            "markdownDescription": "Path to custom dictionary text file.",
                            "type": "string"
                          },
                          "scope": {
                            "anyOf": [
                              {
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "markdownDescription": "Specifies the scope of a dictionary.",
                                "type": "string"
                              },
                              {
                                "items": {
                                  "enum": [
                                    "user",
                                    "workspace",
                                    "folder"
                                  ],
                                  "markdownDescription": "Specifies the scope of a dictionary.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            ],
                            "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                          }
                        },
                        "required": [
                          "path",
                          "addWords",
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "markdownDescription": "Define custom dictionaries..\nIf `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js\n\"cSpell.dictionaryDefinitions\": [\n  {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n]\n```",
                  "scope": "resource",
                  "title": "Dictionary Definitions",
                  "type": "array"
                },
                "enabled": {
                  "default": true,
                  "markdownDescription": "Is the spell checker enabled.",
                  "type": "boolean"
                },
                "flagWords": {
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                  "type": "array"
                },
                "id": {
                  "markdownDescription": "Optional identifier.",
                  "type": "string"
                },
                "ignoreRegExpList": {
                  "items": {
                    "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                    "type": "string"
                  },
                  "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                  "type": "array"
                },
                "ignoreWords": {
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                  "type": "array"
                },
                "includeRegExpList": {
                  "items": {
                    "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                    "type": "string"
                  },
                  "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                  "type": "array"
                },
                "languageId": {
                  "anyOf": [
                    {
                      "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                      "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                      "type": "string"
                    },
                    {
                      "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                      "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                      "type": "string"
                    },
                    {
                      "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                      "pattern": "^(![-\\w_\\s]+)(,![-\\w_\\s]+)*$",
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "markdownDescription": "The language id.  Ex: \"typescript\", \"html\", or \"php\".  \"*\" -- will match all languages."
                },
                "locale": {
                  "anyOf": [
                    {
                      "markdownDescription": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                      "type": "string"
                    },
                    {
                      "items": {
                        "markdownDescription": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "markdownDescription": "The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
                },
                "name": {
                  "markdownDescription": "Optional name of configuration.",
                  "type": "string"
                },
                "noSuggestDictionaries": {
                  "items": {
                    "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                    "type": "string"
                  },
                  "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                  "type": "array"
                },
                "patterns": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "description": {
                        "markdownDescription": "Description of the pattern.",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                        "type": "string"
                      },
                      "pattern": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "RegExp pattern or array of RegExp patterns."
                      }
                    },
                    "required": [
                      "name",
                      "pattern"
                    ],
                    "type": "object"
                  },
                  "markdownDescription": "Defines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*​/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\nDefines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.",
                  "type": "array"
                },
                "suggestWords": {
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                  "type": "array"
                },
                "words": {
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "List of words to be considered correct.",
                  "type": "array"
                }
              },
              "required": [
                "languageId"
              ],
              "type": "object"
            },
            "markdownDescription": "Additional settings for individual programming languages and locales.",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.noSuggestDictionaries": {
            "items": {
              "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
              "type": "string"
            },
            "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.suggestWords": {
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
            "type": "array"
          },
          "cSpell.userWords": {
            "items": {
              "type": "string"
            },
            "markdownDescription": "Words to add to global dictionary -- should only be in the user config file.",
            "scope": "resource",
            "type": "array"
          },
          "cSpell.words": {
            "items": {
              "type": "string"
            },
            "markdownDescription": "List of words to be considered correct.",
            "scope": "resource",
            "type": "array"
          }
        },
        "title": "Languages and Dictionaries",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 6,
        "properties": {
          "cSpell.dark": {
            "additionalProperties": false,
            "markdownDescription": "Decoration for dark themes.\n\nSee:\n- `#cSpell.overviewRulerColor#`\n- `#cSpell.textDecoration#`",
            "properties": {
              "overviewRulerColor": {
                "default": "#fc4c",
                "markdownDescription": "The CSS color used to show issues in the ruler.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecoration": {
                "markdownDescription": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.decorateIssues#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationColor": {
                "default": "#fc4",
                "markdownDescription": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationColorFlagged": {
                "default": "#f44",
                "markdownDescription": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationLine": {
                "default": "underline",
                "enum": [
                  "underline",
                  "overline",
                  "line-through"
                ],
                "markdownDescription": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationStyle": {
                "default": "wavy",
                "enum": [
                  "solid",
                  "wavy",
                  "dotted",
                  "dashed",
                  "double"
                ],
                "markdownDescription": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationThickness": {
                "default": "auto",
                "markdownDescription": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              }
            },
            "scope": "application",
            "type": "object"
          },
          "cSpell.decorateIssues": {
            "default": false,
            "markdownDescription": "Draw custom decorations on Spelling Issues when the `#cSpell.diagnosticLevel#` is `Hint`.",
            "scope": "application",
            "type": "boolean",
            "version": "4.0.0"
          },
          "cSpell.light": {
            "additionalProperties": false,
            "markdownDescription": "Decoration for light themes.\n\nSee:\n- `#cSpell.overviewRulerColor#`\n- `#cSpell.textDecoration#`",
            "properties": {
              "overviewRulerColor": {
                "default": "#fc4c",
                "markdownDescription": "The CSS color used to show issues in the ruler.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecoration": {
                "markdownDescription": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.decorateIssues#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationColor": {
                "default": "#fc4",
                "markdownDescription": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationColorFlagged": {
                "default": "#f44",
                "markdownDescription": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationLine": {
                "default": "underline",
                "enum": [
                  "underline",
                  "overline",
                  "line-through"
                ],
                "markdownDescription": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationStyle": {
                "default": "wavy",
                "enum": [
                  "solid",
                  "wavy",
                  "dotted",
                  "dashed",
                  "double"
                ],
                "markdownDescription": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              },
              "textDecorationThickness": {
                "default": "auto",
                "markdownDescription": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
                "scope": "application",
                "type": "string",
                "version": "4.0.0"
              }
            },
            "scope": "application",
            "type": "object"
          },
          "cSpell.overviewRulerColor": {
            "default": "#fc4c",
            "markdownDescription": "The CSS color used to show issues in the ruler.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
            "scope": "application",
            "type": "string",
            "version": "4.0.0"
          },
          "cSpell.textDecoration": {
            "markdownDescription": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.decorateIssues#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.",
            "scope": "application",
            "type": "string",
            "version": "4.0.0"
          },
          "cSpell.textDecorationColor": {
            "default": "#fc4",
            "markdownDescription": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
            "scope": "application",
            "type": "string",
            "version": "4.0.0"
          },
          "cSpell.textDecorationColorFlagged": {
            "default": "#f44",
            "markdownDescription": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
            "scope": "application",
            "type": "string",
            "version": "4.0.0"
          },
          "cSpell.textDecorationLine": {
            "default": "underline",
            "enum": [
              "underline",
              "overline",
              "line-through"
            ],
            "markdownDescription": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
            "scope": "application",
            "type": "string",
            "version": "4.0.0"
          },
          "cSpell.textDecorationStyle": {
            "default": "wavy",
            "enum": [
              "solid",
              "wavy",
              "dotted",
              "dashed",
              "double"
            ],
            "markdownDescription": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
            "scope": "application",
            "type": "string",
            "version": "4.0.0"
          },
          "cSpell.textDecorationThickness": {
            "default": "auto",
            "markdownDescription": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
            "scope": "application",
            "type": "string",
            "version": "4.0.0"
          }
        },
        "title": "Appearance",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 20,
        "properties": {
          "cSpell.allowCompoundWords": {
            "default": false,
            "markdownDescription": "Enable / Disable allowing word compounds.\n- `true` means `arraylength` would be ok\n- `false` means it would not pass.\n\nNote: this can also cause many misspelled words to seem correct.",
            "scope": "resource",
            "type": "boolean"
          },
          "cSpell.customFolderDictionaries": {
            "deprecated": true,
            "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
            "items": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "addWords": {
                      "default": true,
                      "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                      "title": "Add Words to Dictionary",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional: A human readable description.",
                      "title": "Description of the Dictionary",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "title": "Name of Dictionary",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                      "title": "Path to Dictionary Text File",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                      "title": "Scope of dictionary"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "addWords": {
                      "default": true,
                      "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                      "title": "Add Words to Dictionary",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional: A human readable description.",
                      "title": "Description of the Dictionary",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "title": "Name of Dictionary",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                      "title": "Scope of dictionary"
                    }
                  },
                  "required": [
                    "name",
                    "path"
                  ],
                  "type": "object"
                },
                {
                  "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                  "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                  "type": "string"
                }
              ]
            },
            "markdownDescription": "Define custom dictionaries to be included by default for the folder.\nIf `addWords` is `true` words will be added to this dictionary.",
            "scope": "resource",
            "title": "Custom Folder Dictionaries",
            "type": "array"
          },
          "cSpell.customUserDictionaries": {
            "deprecated": true,
            "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
            "items": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "addWords": {
                      "default": true,
                      "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                      "title": "Add Words to Dictionary",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional: A human readable description.",
                      "title": "Description of the Dictionary",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "title": "Name of Dictionary",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                      "title": "Path to Dictionary Text File",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                      "title": "Scope of dictionary"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "addWords": {
                      "default": true,
                      "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                      "title": "Add Words to Dictionary",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional: A human readable description.",
                      "title": "Description of the Dictionary",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "title": "Name of Dictionary",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                      "title": "Scope of dictionary"
                    }
                  },
                  "required": [
                    "name",
                    "path"
                  ],
                  "type": "object"
                },
                {
                  "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                  "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                  "type": "string"
                }
              ]
            },
            "markdownDescription": "Define custom dictionaries to be included by default for the user.\nIf `addWords` is `true` words will be added to this dictionary.",
            "scope": "application",
            "title": "Custom User Dictionaries",
            "type": "array"
          },
          "cSpell.customWorkspaceDictionaries": {
            "deprecated": true,
            "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
            "items": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "addWords": {
                      "default": true,
                      "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                      "title": "Add Words to Dictionary",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional: A human readable description.",
                      "title": "Description of the Dictionary",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "title": "Name of Dictionary",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                      "title": "Path to Dictionary Text File",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                      "title": "Scope of dictionary"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "addWords": {
                      "default": true,
                      "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                      "title": "Add Words to Dictionary",
                      "type": "boolean"
                    },
                    "description": {
                      "markdownDescription": "Optional: A human readable description.",
                      "title": "Description of the Dictionary",
                      "type": "string"
                    },
                    "name": {
                      "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "title": "Name of Dictionary",
                      "type": "string"
                    },
                    "noSuggest": {
                      "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                      "type": "string"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                      "title": "Scope of dictionary"
                    }
                  },
                  "required": [
                    "name",
                    "path"
                  ],
                  "type": "object"
                },
                {
                  "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                  "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                  "type": "string"
                }
              ]
            },
            "markdownDescription": "Define custom dictionaries to be included by default for the workspace.\nIf `addWords` is `true` words will be added to this dictionary.",
            "scope": "resource",
            "title": "Custom Workspace Dictionaries",
            "type": "array"
          },
          "cSpell.enabledLanguageIds": {
            "default": [
              "asciidoc",
              "bat",
              "c",
              "clojure",
              "coffeescript",
              "cpp",
              "csharp",
              "css",
              "dart",
              "diff",
              "dockerfile",
              "elixir",
              "erlang",
              "fsharp",
              "git-commit",
              "git-rebase",
              "github-actions-workflow",
              "go",
              "graphql",
              "groovy",
              "handlebars",
              "haskell",
              "html",
              "ini",
              "jade",
              "java",
              "javascript",
              "javascriptreact",
              "json",
              "jsonc",
              "julia",
              "jupyter",
              "latex",
              "less",
              "lua",
              "makefile",
              "markdown",
              "objective-c",
              "perl",
              "perl6",
              "php",
              "plaintext",
              "powershell",
              "properties",
              "pug",
              "python",
              "r",
              "razor",
              "restructuredtext",
              "ruby",
              "rust",
              "scala",
              "scminput",
              "scss",
              "shaderlab",
              "shellscript",
              "sql",
              "swift",
              "text",
              "typescript",
              "typescriptreact",
              "vb",
              "vue",
              "xml",
              "xsl",
              "yaml"
            ],
            "items": {
              "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
              "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
              "type": "string"
            },
            "markdownDescription": "Specify a list of file types to spell check. It is better to use `#cSpell.enableFiletypes#` to Enable / Disable checking files types.",
            "scope": "resource",
            "title": "Enabled Language Ids",
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "Legacy",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 4,
        "properties": {
          "cSpell.blockCheckingWhenAverageChunkSizeGreaterThan": {
            "default": 80,
            "markdownDescription": "The maximum average length of chunks of text without word breaks.\n\n\nA chunk is the characters between absolute word breaks.\nAbsolute word breaks match: `/[\\s,{}[\\]]/`\n\n\n**Error Message:** _Average Word Size is Too High._\n\n\nIf you are seeing this message, it means that the file contains mostly long lines\nwithout many word breaks.",
            "scope": "language-overridable",
            "type": "number"
          },
          "cSpell.blockCheckingWhenLineLengthGreaterThan": {
            "default": 10000,
            "markdownDescription": "The maximum line length.\n\n\nBlock spell checking if lines are longer than the value given.\nThis is used to prevent spell checking generated files.\n\n\n**Error Message:** _Lines are too long._",
            "scope": "language-overridable",
            "type": "number"
          },
          "cSpell.blockCheckingWhenTextChunkSizeGreaterThan": {
            "default": 500,
            "markdownDescription": "The maximum length of a chunk of text without word breaks.\n\n\nIt is used to prevent spell checking of generated files.\n\n\nA chunk is the characters between absolute word breaks.\nAbsolute word breaks match: `/[\\s,{}[\\]]/`, i.e. spaces or braces.\n\n\n**Error Message:** _Maximum Word Length is Too High._\n\n\nIf you are seeing this message, it means that the file contains a very long line\nwithout many word breaks.",
            "scope": "language-overridable",
            "type": "number"
          },
          "cSpell.checkLimit": {
            "default": 500,
            "markdownDescription": "The limit in K-Characters to be checked in a file.",
            "scope": "resource",
            "type": "number"
          },
          "cSpell.spellCheckDelayMs": {
            "default": 50,
            "markdownDescription": "Delay in ms after a document has changed before checking it for spelling errors.",
            "scope": "application",
            "type": "number"
          },
          "cSpell.suggestionsTimeout": {
            "default": 400,
            "markdownDescription": "The maximum amount of time in milliseconds to generate suggestions for a word.",
            "scope": "resource",
            "type": "number"
          }
        },
        "title": "Performance",
        "type": "object"
      },
      {
        "additionalProperties": false,
        "order": 2,
        "properties": {
          "cSpell.autoFormatConfigFile": {
            "default": false,
            "markdownDescription": "If a `cspell` configuration file is updated, format the configuration file\nusing the VS Code Format Document Provider. This will cause the configuration\nfile to be saved prior to being updated.",
            "scope": "window",
            "title": "Auto Format Configuration File",
            "type": "boolean"
          },
          "cSpell.diagnosticLevel": {
            "default": "Information",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "enumDescriptions": [
              "Report Spelling Issues as Errors",
              "Report Spelling Issues as Warnings",
              "Report Spelling Issues as Information",
              "Report Spelling Issues as Hints, will not show up in Problems"
            ],
            "markdownDescription": "Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle.",
            "scope": "resource",
            "title": "Set Diagnostic Reporting Level",
            "type": "string"
          },
          "cSpell.diagnosticLevelFlaggedWords": {
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "enumDescriptions": [
              "Report Spelling Issues as Errors",
              "Report Spelling Issues as Warnings",
              "Report Spelling Issues as Information",
              "Report Spelling Issues as Hints, will not show up in Problems"
            ],
            "markdownDescription": "Flagged word issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle.\nBy default, flagged words will use the same diagnostic level as general issues. Use this setting to customize them.",
            "scope": "resource",
            "title": "Set Diagnostic Reporting Level for Flagged Words",
            "type": "string",
            "version": "4.0.0"
          },
          "cSpell.diagnosticLevelSCM": {
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint",
              "Off"
            ],
            "enumDescriptions": [
              "Report Spelling Issues as Errors",
              "Report Spelling Issues as Warnings",
              "Report Spelling Issues as Information",
              "Report Spelling Issues as Hints, will not show up in Problems",
              "Do not Report Spelling Issues"
            ],
            "markdownDescription": "Diagnostic level for source control _commit_ messages. Issues found by the spell checker are marked with a Diagnostic Severity Level.\nThis affects the color of the squiggle.\n\nBy default, this setting will match `#cSpell.diagnosticLevel#`.",
            "scope": "resource",
            "title": "Set Diagnostic Reporting Level in SCM Commit Message",
            "type": "string"
          },
          "cSpell.hideAddToDictionaryCodeActions": {
            "default": false,
            "markdownDescription": "Hide the options to add words to dictionaries or settings.",
            "scope": "resource",
            "type": "boolean"
          },
          "cSpell.maxDuplicateProblems": {
            "default": 20,
            "markdownDescription": "The maximum number of times the same word can be flagged as an error in a file.",
            "scope": "resource",
            "type": "number"
          },
          "cSpell.maxNumberOfProblems": {
            "default": 100,
            "markdownDescription": "Controls the maximum number of spelling errors per document.",
            "scope": "resource",
            "type": "number"
          },
          "cSpell.minWordLength": {
            "default": 4,
            "markdownDescription": "The minimum length of a word before checking it against a dictionary.",
            "scope": "resource",
            "type": "number"
          },
          "cSpell.numSuggestions": {
            "default": 8,
            "markdownDescription": "Controls the number of suggestions shown.",
            "scope": "resource",
            "type": "number"
          },
          "cSpell.showAutocompleteSuggestions": {
            "default": false,
            "markdownDescription": "Show CSpell in-document directives as you type.\n\n**Note:** VS Code must be restarted for this setting to take effect.",
            "scope": "language-overridable",
            "type": "boolean"
          },
          "cSpell.showCommandsInEditorContextMenu": {
            "default": true,
            "markdownDescription": "Show Spell Checker actions in Editor Context Menu",
            "scope": "application",
            "type": "boolean"
          },
          "cSpell.showStatus": {
            "default": true,
            "markdownDescription": "Display the spell checker status on the status bar.",
            "scope": "application",
            "type": "boolean"
          },
          "cSpell.showStatusAlignment": {
            "default": "Right",
            "enum": [
              "Left",
              "Right"
            ],
            "enumDescriptions": [
              "Left Side of Statusbar",
              "Right Side of Statusbar"
            ],
            "markdownDescription": "The side of the status bar to display the spell checker status.",
            "scope": "application",
            "type": "string"
          },
          "cSpell.showSuggestionsLinkInEditorContextMenu": {
            "default": true,
            "markdownDescription": "Show Spelling Suggestions link in the top level context menu.",
            "scope": "application",
            "type": "boolean"
          },
          "cSpell.suggestionMenuType": {
            "default": "quickPick",
            "enum": [
              "quickPick",
              "quickFix"
            ],
            "enumDescriptions": [
              "Suggestions will appear as a drop down at the top of the IDE. (Best choice for Vim Key Bindings)",
              "Suggestions will appear inline near the word, inside the text editor."
            ],
            "markdownDescription": "The type of menu used to display spelling suggestions.",
            "scope": "resource",
            "type": "string"
          },
          "cSpell.suggestionNumChanges": {
            "default": 3,
            "markdownDescription": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
            "scope": "resource",
            "type": "number"
          },
          "cSpell.validateDirectives": {
            "markdownDescription": "Verify that the in-document directives are correct.",
            "scope": "window",
            "type": "boolean"
          }
        },
        "title": "Reporting and Display",
        "type": "object"
      }
    ]
  },
  "workspaces": [
    "docs",
    "tools/build-tools",
    "packages/utils-logger",
    "packages/utils-disposables",
    "packages/json-rpc-api",
    "packages/webview-rpc",
    "packages/webview-api",
    "packages/webview-ui",
    "packages/__cspell-helper",
    "packages/__locale-resolver",
    "packages/__utils",
    "packages/_server",
    "packages/_serverPatternMatcher",
    "packages/_settingsViewer",
    "packages/client",
    "packages/_integrationTests"
  ],
  "scripts": {
    "build-package-schema": "npm --workspace=code-spell-checker-server run build-schema && build-tools update-package-schema && npm run prettier:fix-schema",
    "postinstall": "echo postinstall",
    "build": "npm run build:workspaces && npm run build:schema && npm run build:docs",
    "build:docs": "npm run gen-docs",
    "build:readme": "inject-markdown README.md && prettier -w README.md && inject-markdown docs && prettier -w docs",
    "build:schema": "npm run build-package-schema",
    "build:workspaces": "npm --workspaces run build",
    "clean": "npm --workspaces run clean && shx rm -rf \"packages/*/node_modules\" \"modules/*/node_modules\" \"modules/**/dist\" ",
    "build-production": "npm --workspaces run build-production",
    "build-release": "npm run build && npm run package-extension",
    "gen-docs": "npm --workspace=@internal/docs run gen-docs",
    "package-extension": "vsce package -o ./build",
    "prettier:check": "prettier \"**/*.{ts,tsx,js,json,md,svelte}\" -c",
    "prettier:fix": "npm run prettier:check -- -w",
    "prettier:fix-schema": "prettier -w \"**/*.schema.json\"",
    "test-vsce-build": "shx mkdir -p temp && vsce package -o ./temp/code-spell-checker.vsix",
    "remove-test-files": "shx rm -rf \"packages/*/{out,dist,settingsViewer}/**/*.test.js\"",
    "vscode:prepublish": "npm run build-production && npm run remove-test-files",
    "lint": "npm run lint:eslint && npm run prettier:fix",
    "lint:eslint": "eslint . --fix --cache",
    "lint-docs": "prettier -w \"docs/**/*.{md,markdown,yaml,yml,json,html,htm,js,ts}\"",
    "lint-docs-ci": "prettier -c \"docs/**/*.{md,markdown,yaml,yml,json,html,htm,js,ts}\"",
    "test-client-integration": "npm --workspace=@internal/integration-tests run test-integration",
    "test": "npm --workspaces run test && echo OK",
    "update-packages": "npx npm-check-updates --root -ws --target semver -u && npm i",
    "preinstall": "npx only-allow npm"
  },
  "devDependencies": {
    "@tsconfig/node18": "^18.2.2",
    "@types/jest-when": "^3.5.5",
    "@types/node": "^18.18.10",
    "@types/vscode": "1.80.0",
    "@types/vscode-webview": "^1.57.4",
    "@typescript-eslint/eslint-plugin": "^6.11.0",
    "@typescript-eslint/parser": "^6.11.0",
    "@vitest/coverage-istanbul": "^0.34.6",
    "@vscode/vsce": "^2.22.0",
    "chokidar-cli": "^3.0.0",
    "concurrently": "^8.2.2",
    "esbuild": "^0.19.6",
    "eslint": "^8.54.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-import-resolver-typescript": "^3.6.1",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-jest": "^27.6.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^5.0.1",
    "eslint-plugin-promise": "^6.1.1",
    "eslint-plugin-simple-import-sort": "^10.0.0",
    "eslint-plugin-unicorn": "^49.0.0",
    "inject-markdown": "^2.1.0",
    "jest": "^29.7.0",
    "jest-mock-vscode": "^2.1.0",
    "jest-when": "^3.6.0",
    "ovsx": "^0.8.3",
    "prettier": "^3.1.0",
    "prettier-plugin-svelte": "^3.1.0",
    "rollup": "^4.5.0",
    "rollup-plugin-dts": "^6.1.0",
    "shx": "^0.3.4",
    "ts-jest": "^29.1.1",
    "typescript": "^5.2.2",
    "vite": "^4.5.0",
    "vitest": "^0.34.6"
  },
  "dependencies": {
    "@cspell/cspell-bundled-dicts": "^8.0.0",
    "@cspell/cspell-types": "^8.0.0",
    "@types/react": "^17.0.70",
    "cspell": "^8.0.0",
    "regexp-worker": "^2.0.2"
  },
  "comment-resolutions": {
    "@types/react": "Can be removed after moving to react 18."
  },
  "resolutions": {
    "@types/react": "^17.0.44"
  }
}
