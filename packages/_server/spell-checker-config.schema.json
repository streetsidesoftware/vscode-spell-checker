{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
  },
  "properties": {
    "allowCompoundWords": {
      "default": false,
      "description": "Enable / Disable allowing word compounds. `true` means `arraylength` would be ok, `false` means it would not pass.",
      "markdownDescription": "Enable / Disable allowing word compounds.\n- `true` means `arraylength` would be ok\n- `false` means it would not pass.\n\nNote: this can also cause many misspelled words to seem correct.",
      "scope": "resource",
      "type": "boolean"
    },
    "allowedSchemas": {
      "default": [
        "file",
        "gist",
        "sftp",
        "untitled"
      ],
      "description": "Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).",
      "items": {
        "type": "string"
      },
      "scope": "window",
      "type": "array"
    },
    "blockCheckingWhenAverageChunkSizeGreatherThan": {
      "default": 40,
      "description": "The maximum average chunk of text size. A chunk is the characters between absolute word breaks. Absolute word breaks match: `/[\\s,{}[\\]]/`",
      "scope": "resource",
      "type": "number"
    },
    "blockCheckingWhenLineLengthGreaterThan": {
      "default": 1000,
      "description": "The maximum line length",
      "scope": "resource",
      "type": "number"
    },
    "blockCheckingWhenTextChunkSizeGreaterThan": {
      "default": 200,
      "description": "The maximum size of text chunks",
      "scope": "resource",
      "type": "number"
    },
    "caseSensitive": {
      "description": "Words must match case rules.",
      "markdownDescription": "Turns on case sensitive checking by default",
      "scope": "resource",
      "type": "boolean"
    },
    "checkLimit": {
      "default": 500,
      "description": "The limit in K-Characters to be checked in a file.",
      "scope": "resource",
      "type": "number"
    },
    "customDictionaries": {
      "additionalProperties": {
        "anyOf": [
          {
            "markdownDescription": "- `true` - turn on the named dictionary\n- `false` - turn off the named dictionary",
            "title": "Named dictionary to be enabled / disabled",
            "type": "boolean"
          },
          {
            "additionalProperties": false,
            "markdownDescription": "Define a custom dictionary to be included.",
            "properties": {
              "addWords": {
                "default": false,
                "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                "title": "Add Words to Dictionary",
                "type": "boolean"
              },
              "description": {
                "markdownDescription": "Optional: A human readable description.",
                "title": "Description of the Dictionary",
                "type": "string"
              },
              "name": {
                "markdownDescription": "The reference name of the dictionary.\n\nExample: `My Words` or `custom`\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                "title": "Name of Dictionary",
                "type": "string"
              },
              "path": {
                "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                "title": "Optional Path to Dictionary Text File",
                "type": "string"
              },
              "scope": {
                "anyOf": [
                  {
                    "description": "Specifies the scope of a dictionary.",
                    "enum": [
                      "user",
                      "workspace",
                      "folder"
                    ],
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "Specifies the scope of a dictionary.",
                      "enum": [
                        "user",
                        "workspace",
                        "folder"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                "title": "Scope of dictionary"
              }
            },
            "title": "Custom Dictionary Entry",
            "type": "object"
          }
        ]
      },
      "markdownDescription": "Define custom dictionaries to be included by default for the folder.\nIf `addWords` is `true` words will be added to this dictionary.\n\n**Example:**\n\n```js\ncustomDictionaries: {\n  \"project-words\": {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n}\n```",
      "scope": "resource",
      "title": "Custom Dictionaries",
      "type": "object"
    },
    "customFolderDictionaries": {
      "deprecationMessage": "- Use `customDictionaries` instead.",
      "items": {
        "anyOf": [
          {
            "additionalProperties": false,
            "properties": {
              "addWords": {
                "default": false,
                "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                "title": "Add Words to Dictionary",
                "type": "boolean"
              },
              "description": {
                "markdownDescription": "Optional: A human readable description.",
                "title": "Description of the Dictionary",
                "type": "string"
              },
              "name": {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                "markdownDescription": "The reference name of the dictionary.\n\nExample: `My Words` or `custom`\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "title": "Name of Dictionary",
                "type": "string"
              },
              "path": {
                "description": "A File System Path",
                "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                "title": "Optional Path to Dictionary Text File",
                "type": "string"
              },
              "scope": {
                "anyOf": [
                  {
                    "description": "Specifies the scope of a dictionary.",
                    "enum": [
                      "user",
                      "workspace",
                      "folder"
                    ],
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "Specifies the scope of a dictionary.",
                      "enum": [
                        "user",
                        "workspace",
                        "folder"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                "title": "Scope of dictionary"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          {
            "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
            "type": "string"
          }
        ]
      },
      "markdownDescription": "Define custom dictionaries to be included by default for the folder.\nIf `addWords` is `true` words will be added to this dictionary.",
      "scope": "resource",
      "title": "Custom Folder Dictionaries",
      "type": "array"
    },
    "customUserDictionaries": {
      "deprecationMessage": "- Use `customDictionaries` instead.",
      "items": {
        "anyOf": [
          {
            "additionalProperties": false,
            "properties": {
              "addWords": {
                "default": false,
                "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                "title": "Add Words to Dictionary",
                "type": "boolean"
              },
              "description": {
                "markdownDescription": "Optional: A human readable description.",
                "title": "Description of the Dictionary",
                "type": "string"
              },
              "name": {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                "markdownDescription": "The reference name of the dictionary.\n\nExample: `My Words` or `custom`\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "title": "Name of Dictionary",
                "type": "string"
              },
              "path": {
                "description": "A File System Path",
                "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                "title": "Optional Path to Dictionary Text File",
                "type": "string"
              },
              "scope": {
                "anyOf": [
                  {
                    "description": "Specifies the scope of a dictionary.",
                    "enum": [
                      "user",
                      "workspace",
                      "folder"
                    ],
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "Specifies the scope of a dictionary.",
                      "enum": [
                        "user",
                        "workspace",
                        "folder"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                "title": "Scope of dictionary"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          {
            "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
            "type": "string"
          }
        ]
      },
      "markdownDescription": "Define custom dictionaries to be included by default for the user.\nIf `addWords` is `true` words will be added to this dictionary.",
      "scope": "application",
      "title": "Custom User Dictionaries",
      "type": "array"
    },
    "customWorkspaceDictionaries": {
      "deprecationMessage": "- Use `customDictionaries` instead.",
      "items": {
        "anyOf": [
          {
            "additionalProperties": false,
            "properties": {
              "addWords": {
                "default": false,
                "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                "title": "Add Words to Dictionary",
                "type": "boolean"
              },
              "description": {
                "markdownDescription": "Optional: A human readable description.",
                "title": "Description of the Dictionary",
                "type": "string"
              },
              "name": {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                "markdownDescription": "The reference name of the dictionary.\n\nExample: `My Words` or `custom`\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "title": "Name of Dictionary",
                "type": "string"
              },
              "path": {
                "description": "A File System Path",
                "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                "title": "Optional Path to Dictionary Text File",
                "type": "string"
              },
              "scope": {
                "anyOf": [
                  {
                    "description": "Specifies the scope of a dictionary.",
                    "enum": [
                      "user",
                      "workspace",
                      "folder"
                    ],
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "Specifies the scope of a dictionary.",
                      "enum": [
                        "user",
                        "workspace",
                        "folder"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                "title": "Scope of dictionary"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          {
            "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
            "type": "string"
          }
        ]
      },
      "markdownDescription": "Define custom dictionaries to be included by default for the workspace.\nIf `addWords` is `true` words will be added to this dictionary.",
      "scope": "resource",
      "title": "Custom Workspace Dictionaries",
      "type": "array"
    },
    "diagnosticLevel": {
      "default": "Information",
      "description": "Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of squiggle.",
      "enum": [
        "Error",
        "Warning",
        "Information",
        "Hint"
      ],
      "enumDescriptions": [
        "Report Spelling Issues as Errors",
        "Report Spelling Issues as Warnings",
        "Report Spelling Issues as Information",
        "Report Spelling Issues as Hints, will not show up in Problems"
      ],
      "scope": "resource",
      "type": "string"
    },
    "dictionaries": {
      "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary. To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.",
      "items": {
        "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "dictionaryDefinitions": {
      "description": "Define additional available dictionaries",
      "items": {
        "anyOf": [
          {
            "additionalProperties": false,
            "properties": {
              "description": {
                "description": "Optional description",
                "type": "string"
              },
              "name": {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "type": "string"
              },
              "noSuggest": {
                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                "type": "boolean"
              },
              "path": {
                "description": "Path to the file",
                "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                "type": "string"
              },
              "repMap": {
                "description": "Replacement pairs",
                "items": {
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "type": "array"
              },
              "useCompounds": {
                "description": "Use Compounds",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "path"
            ],
            "type": "object"
          },
          {
            "additionalProperties": false,
            "description": "For Defining Custom dictionaries. They are generally scoped to a `user`, `workspace`, or `folder`. When `addWords` is true, indicates that the spell checker can add words to the file. Note: only plain text files with one word per line are supported at this moment.",
            "properties": {
              "addWords": {
                "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                "type": "boolean"
              },
              "description": {
                "description": "Optional description",
                "type": "string"
              },
              "name": {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "type": "string"
              },
              "noSuggest": {
                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                "type": "boolean"
              },
              "path": {
                "description": "Path to custom dictionary text file.",
                "pattern": "^.*\\.txt$",
                "type": "string"
              },
              "repMap": {
                "description": "Replacement pairs",
                "items": {
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "type": "array"
              },
              "scope": {
                "anyOf": [
                  {
                    "description": "Specifies the scope of a dictionary.",
                    "enum": [
                      "user",
                      "workspace",
                      "folder"
                    ],
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "Specifies the scope of a dictionary.",
                      "enum": [
                        "user",
                        "workspace",
                        "folder"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "description": "Defines the scope for when words will be added to the dictionary. Scope values: `user`, `workspace`, `folder`"
              },
              "useCompounds": {
                "description": "Use Compounds",
                "type": "boolean"
              }
            },
            "required": [
              "addWords",
              "name",
              "path"
            ],
            "type": "object"
          },
          {
            "additionalProperties": false,
            "deprecationMessage": "Use `DictionaryDefinitionPreferred`",
            "description": "Only for legacy dictionary definitions",
            "properties": {
              "description": {
                "description": "Optional description",
                "type": "string"
              },
              "file": {
                "deprecationMessage": "Use `path` instead.",
                "description": "Path to the file, only for legacy dictionary definitions",
                "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                "type": "string"
              },
              "name": {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "type": "string"
              },
              "noSuggest": {
                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                "type": "boolean"
              },
              "repMap": {
                "description": "Replacement pairs",
                "items": {
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "type": "array"
              },
              "useCompounds": {
                "description": "Use Compounds",
                "type": "boolean"
              }
            },
            "required": [
              "file",
              "name"
            ],
            "type": "object"
          }
        ]
      },
      "scope": "resource",
      "type": "array"
    },
    "enableFiletypes": {
      "items": {
        "markdownDescription": "Enable / Disable checking file types (languageIds).\nTo disable a language, prefix with `!` as in `!json`,\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
        "pattern": "^!?(?!\\s)[\\s\\w_.\\-]+$",
        "patternErrorMessage": "Allowed characters are `a-zA-Z`, `.`, `-`, `_` and space.",
        "type": "string"
      },
      "markdownDescription": "Enable / Disable checking file types (languageIds).\nThese are in additional to the file types specified by `cSpell.enabledLanguageIds`.\nTo disable a language, prefix with `!` as in `!json`,\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
      "scope": "resource",
      "title": "File Types to Check",
      "type": "array",
      "uniqueItems": true
    },
    "enabled": {
      "default": true,
      "description": "Enable / Disable the spell checker.",
      "scope": "resource",
      "type": "boolean"
    },
    "enabledLanguageIds": {
      "default": [
        "asciidoc",
        "c",
        "cpp",
        "csharp",
        "css",
        "git-commit",
        "go",
        "graphql",
        "handlebars",
        "haskell",
        "html",
        "jade",
        "java",
        "javascript",
        "javascriptreact",
        "json",
        "jsonc",
        "latex",
        "less",
        "markdown",
        "php",
        "plaintext",
        "python",
        "pug",
        "restructuredtext",
        "rust",
        "scala",
        "scss",
        "text",
        "typescript",
        "typescriptreact",
        "yaml",
        "yml"
      ],
      "description": "Specify file types to spell check. Use `cSpell.enableFiletypes` to Enable / Disable checking files types.",
      "items": {
        "type": "string"
      },
      "markdownDescription": "Specify a list of file types to spell check. It is better to use `cSpell.enableFiletypes` to Enable / Disable checking files types.",
      "scope": "resource",
      "title": "Enabled Language Ids",
      "type": "array",
      "uniqueItems": true
    },
    "experimental.enableRegexpView": {
      "default": false,
      "description": "Show Regular Expression Explorer",
      "scope": "application",
      "type": "boolean"
    },
    "files": {
      "description": "Glob patterns of files to be checked. Glob patterns are relative to the `globRoot` of the configuration file that defines them.",
      "items": {
        "description": "These are glob expressions",
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "fixSpellingWithRenameProvider": {
      "default": true,
      "description": "Use Rename when fixing spelling issues.",
      "scope": "language-overridable",
      "type": "boolean"
    },
    "flagWords": {
      "description": "list of words to always be considered incorrect.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "globRoot": {
      "description": "The root to use for glop patterns found in this configuration. Default: The current workspace folder. Use `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file. Defining globRoot, does not impact imported configurations.\n\nSpecial Values:\n\n- `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\\n\n- `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.",
      "scope": "resource",
      "type": "string"
    },
    "ignorePaths": {
      "default": [
        "package-lock.json",
        "node_modules",
        "vscode-extension",
        ".git/objects",
        ".vscode",
        ".vscode-insiders"
      ],
      "description": "Glob patterns of files to be ignored. The patterns are relative to the `globRoot` of the configuration file that defines them.",
      "items": {
        "description": "Simple Glob string, the root will be globRoot",
        "type": "string"
      },
      "scope": "resource",
      "title": "Glob patterns of files to be ignored",
      "type": "array"
    },
    "ignoreRegExpList": {
      "description": "List of RegExp patterns or Pattern names to exclude from spell checking.\n\nExample: [\"href\"] - to exclude html href",
      "items": {
        "description": "A PatternRef is a Pattern or PatternId.",
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "ignoreWords": {
      "description": "A list of words to be ignored by the spell checker.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "import": {
      "description": "Other settings files to be included",
      "items": {
        "description": "A File System Path",
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "includeRegExpList": {
      "description": "List of RegExp patterns or defined Pattern names to define the text to be included for spell checking. If includeRegExpList is defined, ONLY, text matching the included patterns will be checked.",
      "items": {
        "description": "A PatternRef is a Pattern or PatternId.",
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "language": {
      "default": "en",
      "description": "Current active spelling language.\nExample: \"en-GB\" for British English\nExample: \"en,nl\" to enable both English and Dutch",
      "scope": "resource",
      "type": "string"
    },
    "languageSettings": {
      "description": "Additional settings for individual languages.",
      "items": {
        "additionalProperties": false,
        "properties": {
          "allowCompoundWords": {
            "default": false,
            "description": "True to enable compound word checking.",
            "type": "boolean"
          },
          "caseSensitive": {
            "default": false,
            "description": "Words must match case rules.",
            "type": "boolean"
          },
          "description": {
            "description": "Optional description of configuration",
            "type": "string"
          },
          "dictionaries": {
            "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary. To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.",
            "items": {
              "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
              "type": "string"
            },
            "type": "array"
          },
          "dictionaryDefinitions": {
            "description": "Define additional available dictionaries",
            "items": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "description": "Optional description",
                      "type": "string"
                    },
                    "name": {
                      "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    "noSuggest": {
                      "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path to the file",
                      "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                      "type": "string"
                    },
                    "repMap": {
                      "description": "Replacement pairs",
                      "items": {
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "useCompounds": {
                      "description": "Use Compounds",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "name",
                    "path"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "description": "For Defining Custom dictionaries. They are generally scoped to a `user`, `workspace`, or `folder`. When `addWords` is true, indicates that the spell checker can add words to the file. Note: only plain text files with one word per line are supported at this moment.",
                  "properties": {
                    "addWords": {
                      "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                      "type": "boolean"
                    },
                    "description": {
                      "description": "Optional description",
                      "type": "string"
                    },
                    "name": {
                      "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    "noSuggest": {
                      "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path to custom dictionary text file.",
                      "pattern": "^.*\\.txt$",
                      "type": "string"
                    },
                    "repMap": {
                      "description": "Replacement pairs",
                      "items": {
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "type": "string"
                        },
                        {
                          "items": {
                            "description": "Specifies the scope of a dictionary.",
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "Defines the scope for when words will be added to the dictionary. Scope values: `user`, `workspace`, `folder`"
                    },
                    "useCompounds": {
                      "description": "Use Compounds",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "addWords",
                    "name",
                    "path"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "deprecationMessage": "Use `DictionaryDefinitionPreferred`",
                  "description": "Only for legacy dictionary definitions",
                  "properties": {
                    "description": {
                      "description": "Optional description",
                      "type": "string"
                    },
                    "file": {
                      "deprecationMessage": "Use `path` instead.",
                      "description": "Path to the file, only for legacy dictionary definitions",
                      "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                      "type": "string"
                    },
                    "name": {
                      "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    "noSuggest": {
                      "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                      "type": "boolean"
                    },
                    "repMap": {
                      "description": "Replacement pairs",
                      "items": {
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "useCompounds": {
                      "description": "Use Compounds",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "file",
                    "name"
                  ],
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "enabled": {
            "default": true,
            "description": "Is the spell checker enabled",
            "type": "boolean"
          },
          "flagWords": {
            "description": "list of words to always be considered incorrect.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Optional identifier",
            "type": "string"
          },
          "ignoreRegExpList": {
            "description": "List of RegExp patterns or Pattern names to exclude from spell checking.\n\nExample: [\"href\"] - to exclude html href",
            "items": {
              "description": "A PatternRef is a Pattern or PatternId.",
              "type": "string"
            },
            "type": "array"
          },
          "ignoreWords": {
            "description": "List of words to be ignored. An Ignored word will not show up as an error even if it is also in the `flagWords`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "includeRegExpList": {
            "description": "List of RegExp patterns or defined Pattern names to define the text to be included for spell checking. If includeRegExpList is defined, ONLY, text matching the included patterns will be checked.",
            "items": {
              "description": "A PatternRef is a Pattern or PatternId.",
              "type": "string"
            },
            "type": "array"
          },
          "languageId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "description": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                  "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "description": "The language id.  Ex: \"typescript\", \"html\", or \"php\".  \"*\" -- will match all languages"
          },
          "local": {
            "anyOf": [
              {
                "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                "type": "string"
              },
              {
                "items": {
                  "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "deprecationMessage": "Use `locale` instead",
            "description": "Deprecated - The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
          },
          "locale": {
            "anyOf": [
              {
                "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                "type": "string"
              },
              {
                "items": {
                  "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "description": "The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
          },
          "name": {
            "description": "Optional name of configuration",
            "type": "string"
          },
          "noSuggestDictionaries": {
            "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
            "items": {
              "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
              "type": "string"
            },
            "type": "array"
          },
          "patterns": {
            "description": "Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList",
            "items": {
              "additionalProperties": false,
              "properties": {
                "description": {
                  "description": "Description of the pattern.",
                  "type": "string"
                },
                "name": {
                  "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                  "type": "string"
                },
                "pattern": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "description": "RegExp pattern or array of RegExp patterns"
                }
              },
              "required": [
                "name",
                "pattern"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "words": {
            "description": "list of words to be always considered correct",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "languageId"
        ],
        "type": "object"
      },
      "scope": "resource",
      "type": "array"
    },
    "logLevel": {
      "default": "Error",
      "description": "Set the Debug Level for logging messages.",
      "enum": [
        "None",
        "Error",
        "Warning",
        "Information",
        "Debug"
      ],
      "enumDescriptions": [
        "Do not log",
        "Log only errors",
        "Log errors and warnings",
        "Log errors, warnings, and info",
        "Log everything (noisy)"
      ],
      "scope": "window",
      "type": "string"
    },
    "maxDuplicateProblems": {
      "default": 5,
      "description": "The maximum number of times the same word can be flagged as an error in a file.",
      "scope": "resource",
      "type": "number"
    },
    "maxNumberOfProblems": {
      "default": 100,
      "description": "Controls the maximum number of spelling errors per document.",
      "scope": "resource",
      "type": "number"
    },
    "minWordLength": {
      "default": 4,
      "description": "The minimum length of a word before checking it against a dictionary.",
      "scope": "resource",
      "type": "number"
    },
    "noConfigSearch": {
      "description": "Prevents searching for local configuration when checking individual documents.",
      "scope": "resource",
      "type": "boolean"
    },
    "noSuggestDictionaries": {
      "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
      "items": {
        "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "numSuggestions": {
      "default": 8,
      "description": "Controls the number of suggestions shown.",
      "scope": "resource",
      "type": "number"
    },
    "overrides": {
      "description": "Overrides to apply based upon the file path.",
      "items": {
        "additionalProperties": false,
        "properties": {
          "allowCompoundWords": {
            "default": false,
            "description": "True to enable compound word checking.",
            "type": "boolean"
          },
          "caseSensitive": {
            "default": false,
            "description": "Words must match case rules.",
            "type": "boolean"
          },
          "description": {
            "description": "Optional description of configuration",
            "type": "string"
          },
          "dictionaries": {
            "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary. To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.",
            "items": {
              "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
              "type": "string"
            },
            "type": "array"
          },
          "dictionaryDefinitions": {
            "description": "Define additional available dictionaries",
            "items": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "description": "Optional description",
                      "type": "string"
                    },
                    "name": {
                      "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    "noSuggest": {
                      "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path to the file",
                      "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                      "type": "string"
                    },
                    "repMap": {
                      "description": "Replacement pairs",
                      "items": {
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "useCompounds": {
                      "description": "Use Compounds",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "name",
                    "path"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "description": "For Defining Custom dictionaries. They are generally scoped to a `user`, `workspace`, or `folder`. When `addWords` is true, indicates that the spell checker can add words to the file. Note: only plain text files with one word per line are supported at this moment.",
                  "properties": {
                    "addWords": {
                      "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                      "type": "boolean"
                    },
                    "description": {
                      "description": "Optional description",
                      "type": "string"
                    },
                    "name": {
                      "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    "noSuggest": {
                      "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path to custom dictionary text file.",
                      "pattern": "^.*\\.txt$",
                      "type": "string"
                    },
                    "repMap": {
                      "description": "Replacement pairs",
                      "items": {
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "scope": {
                      "anyOf": [
                        {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "type": "string"
                        },
                        {
                          "items": {
                            "description": "Specifies the scope of a dictionary.",
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "Defines the scope for when words will be added to the dictionary. Scope values: `user`, `workspace`, `folder`"
                    },
                    "useCompounds": {
                      "description": "Use Compounds",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "addWords",
                    "name",
                    "path"
                  ],
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "deprecationMessage": "Use `DictionaryDefinitionPreferred`",
                  "description": "Only for legacy dictionary definitions",
                  "properties": {
                    "description": {
                      "description": "Optional description",
                      "type": "string"
                    },
                    "file": {
                      "deprecationMessage": "Use `path` instead.",
                      "description": "Path to the file, only for legacy dictionary definitions",
                      "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                      "type": "string"
                    },
                    "name": {
                      "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    "noSuggest": {
                      "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                      "type": "boolean"
                    },
                    "repMap": {
                      "description": "Replacement pairs",
                      "items": {
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "useCompounds": {
                      "description": "Use Compounds",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "file",
                    "name"
                  ],
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "enableFiletypes": {
            "items": {
              "description": "This can be '*', 'typescript', 'cpp', 'json', etc.",
              "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
              "type": "string"
            },
            "markdownDescription": "Enable / Disable checking file types (languageIds).\nThese are in additional to the file types specified by `cSpell.enabledLanguageIds`.\nTo disable a language, prefix with `!` as in `!json`,\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
            "scope": "resource",
            "title": "File Types to Check",
            "type": "array",
            "uniqueItems": true
          },
          "enabled": {
            "default": true,
            "description": "Is the spell checker enabled",
            "type": "boolean"
          },
          "enabledLanguageIds": {
            "description": "languageIds for the files to spell check.",
            "items": {
              "description": "This can be '*', 'typescript', 'cpp', 'json', etc.",
              "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
              "type": "string"
            },
            "type": "array"
          },
          "filename": {
            "anyOf": [
              {
                "description": "These are glob expressions",
                "type": "string"
              },
              {
                "items": {
                  "description": "These are glob expressions",
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "description": "Glob pattern or patterns to match against"
          },
          "flagWords": {
            "description": "list of words to always be considered incorrect.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Optional identifier",
            "type": "string"
          },
          "ignoreRegExpList": {
            "description": "List of RegExp patterns or Pattern names to exclude from spell checking.\n\nExample: [\"href\"] - to exclude html href",
            "items": {
              "description": "A PatternRef is a Pattern or PatternId.",
              "type": "string"
            },
            "type": "array"
          },
          "ignoreWords": {
            "description": "List of words to be ignored. An Ignored word will not show up as an error even if it is also in the `flagWords`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "includeRegExpList": {
            "description": "List of RegExp patterns or defined Pattern names to define the text to be included for spell checking. If includeRegExpList is defined, ONLY, text matching the included patterns will be checked.",
            "items": {
              "description": "A PatternRef is a Pattern or PatternId.",
              "type": "string"
            },
            "type": "array"
          },
          "language": {
            "description": "Sets the locale",
            "type": "string"
          },
          "languageId": {
            "description": "Sets the programming language id",
            "type": "string"
          },
          "languageSettings": {
            "description": "Additional settings for individual languages.",
            "items": {
              "additionalProperties": false,
              "properties": {
                "allowCompoundWords": {
                  "default": false,
                  "description": "True to enable compound word checking.",
                  "type": "boolean"
                },
                "caseSensitive": {
                  "default": false,
                  "description": "Words must match case rules.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Optional description of configuration",
                  "type": "string"
                },
                "dictionaries": {
                  "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary. To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.",
                  "items": {
                    "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                    "type": "string"
                  },
                  "type": "array"
                },
                "dictionaryDefinitions": {
                  "description": "Define additional available dictionaries",
                  "items": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "description": {
                            "description": "Optional description",
                            "type": "string"
                          },
                          "name": {
                            "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "type": "string"
                          },
                          "noSuggest": {
                            "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                            "type": "boolean"
                          },
                          "path": {
                            "description": "Path to the file",
                            "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                            "type": "string"
                          },
                          "repMap": {
                            "description": "Replacement pairs",
                            "items": {
                              "items": {
                                "type": "string"
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "useCompounds": {
                            "description": "Use Compounds",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "name",
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "For Defining Custom dictionaries. They are generally scoped to a `user`, `workspace`, or `folder`. When `addWords` is true, indicates that the spell checker can add words to the file. Note: only plain text files with one word per line are supported at this moment.",
                        "properties": {
                          "addWords": {
                            "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                            "type": "boolean"
                          },
                          "description": {
                            "description": "Optional description",
                            "type": "string"
                          },
                          "name": {
                            "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "type": "string"
                          },
                          "noSuggest": {
                            "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                            "type": "boolean"
                          },
                          "path": {
                            "description": "Path to custom dictionary text file.",
                            "pattern": "^.*\\.txt$",
                            "type": "string"
                          },
                          "repMap": {
                            "description": "Replacement pairs",
                            "items": {
                              "items": {
                                "type": "string"
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "scope": {
                            "anyOf": [
                              {
                                "description": "Specifies the scope of a dictionary.",
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "type": "string"
                              },
                              {
                                "items": {
                                  "description": "Specifies the scope of a dictionary.",
                                  "enum": [
                                    "user",
                                    "workspace",
                                    "folder"
                                  ],
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            ],
                            "description": "Defines the scope for when words will be added to the dictionary. Scope values: `user`, `workspace`, `folder`"
                          },
                          "useCompounds": {
                            "description": "Use Compounds",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "addWords",
                          "name",
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "deprecationMessage": "Use `DictionaryDefinitionPreferred`",
                        "description": "Only for legacy dictionary definitions",
                        "properties": {
                          "description": {
                            "description": "Optional description",
                            "type": "string"
                          },
                          "file": {
                            "deprecationMessage": "Use `path` instead.",
                            "description": "Path to the file, only for legacy dictionary definitions",
                            "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                            "type": "string"
                          },
                          "name": {
                            "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`",
                            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "type": "string"
                          },
                          "noSuggest": {
                            "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                            "type": "boolean"
                          },
                          "repMap": {
                            "description": "Replacement pairs",
                            "items": {
                              "items": {
                                "type": "string"
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "useCompounds": {
                            "description": "Use Compounds",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "file",
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                },
                "enabled": {
                  "default": true,
                  "description": "Is the spell checker enabled",
                  "type": "boolean"
                },
                "flagWords": {
                  "description": "list of words to always be considered incorrect.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "Optional identifier",
                  "type": "string"
                },
                "ignoreRegExpList": {
                  "description": "List of RegExp patterns or Pattern names to exclude from spell checking.\n\nExample: [\"href\"] - to exclude html href",
                  "items": {
                    "description": "A PatternRef is a Pattern or PatternId.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "ignoreWords": {
                  "description": "List of words to be ignored. An Ignored word will not show up as an error even if it is also in the `flagWords`.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "includeRegExpList": {
                  "description": "List of RegExp patterns or defined Pattern names to define the text to be included for spell checking. If includeRegExpList is defined, ONLY, text matching the included patterns will be checked.",
                  "items": {
                    "description": "A PatternRef is a Pattern or PatternId.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "languageId": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "description": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                        "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "description": "The language id.  Ex: \"typescript\", \"html\", or \"php\".  \"*\" -- will match all languages"
                },
                "local": {
                  "anyOf": [
                    {
                      "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                      "type": "string"
                    },
                    {
                      "items": {
                        "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "deprecationMessage": "Use `locale` instead",
                  "description": "Deprecated - The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
                },
                "locale": {
                  "anyOf": [
                    {
                      "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                      "type": "string"
                    },
                    {
                      "items": {
                        "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "description": "The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
                },
                "name": {
                  "description": "Optional name of configuration",
                  "type": "string"
                },
                "noSuggestDictionaries": {
                  "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
                  "items": {
                    "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                    "type": "string"
                  },
                  "type": "array"
                },
                "patterns": {
                  "description": "Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList",
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "description": {
                        "description": "Description of the pattern.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                        "type": "string"
                      },
                      "pattern": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "description": "RegExp pattern or array of RegExp patterns"
                      }
                    },
                    "required": [
                      "name",
                      "pattern"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "words": {
                  "description": "list of words to be always considered correct",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "languageId"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "maxDuplicateProblems": {
            "default": 5,
            "description": "The maximum number of times the same word can be flagged as an error in a file.",
            "type": "number"
          },
          "maxNumberOfProblems": {
            "default": 100,
            "description": "The maximum number of problems to report in a file.",
            "type": "number"
          },
          "minWordLength": {
            "default": 4,
            "description": "The minimum length of a word before checking it against a dictionary.",
            "type": "number"
          },
          "name": {
            "description": "Optional name of configuration",
            "type": "string"
          },
          "noSuggestDictionaries": {
            "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
            "items": {
              "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
              "type": "string"
            },
            "type": "array"
          },
          "numSuggestions": {
            "default": 10,
            "description": "Number of suggestions to make",
            "type": "number"
          },
          "patterns": {
            "description": "Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList",
            "items": {
              "additionalProperties": false,
              "properties": {
                "description": {
                  "description": "Description of the pattern.",
                  "type": "string"
                },
                "name": {
                  "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                  "type": "string"
                },
                "pattern": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "description": "RegExp pattern or array of RegExp patterns"
                }
              },
              "required": [
                "name",
                "pattern"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "pnpFiles": {
            "default": [
              ".pnp.js",
              ".pnp.cjs"
            ],
            "description": "The PnP files to search for. Note: `.mjs` files are not currently supported.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "usePnP": {
            "default": false,
            "description": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence of a PnP file and load it.",
            "type": "boolean"
          },
          "words": {
            "description": "list of words to be always considered correct",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "filename"
        ],
        "type": "object"
      },
      "scope": "resource",
      "type": "array"
    },
    "patterns": {
      "description": "Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList",
      "items": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "Description of the pattern.",
            "type": "string"
          },
          "name": {
            "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
            "type": "string"
          },
          "pattern": {
            "description": "RegExp pattern or array of RegExp patterns",
            "type": "string"
          }
        },
        "required": [
          "name",
          "pattern"
        ],
        "type": "object"
      },
      "scope": "resource",
      "type": "array"
    },
    "showCommandsInEditorContextMenu": {
      "default": true,
      "description": "Show Spell Checker actions in Editor Context Menu",
      "scope": "application",
      "type": "boolean"
    },
    "showStatus": {
      "default": true,
      "description": "Display the spell checker status on the status bar.",
      "scope": "application",
      "type": "boolean"
    },
    "showStatusAlignment": {
      "default": "Right",
      "description": "The side of the status bar to display the spell checker status.",
      "enum": [
        "Left",
        "Right"
      ],
      "enumDescriptions": [
        "Left Side of Statusbar",
        "Right Side of Statusbar"
      ],
      "scope": "application",
      "type": "string"
    },
    "spellCheckDelayMs": {
      "default": 50,
      "description": "Delay in ms after a document has changed before checking it for spelling errors.",
      "scope": "application",
      "type": "number"
    },
    "spellCheckOnlyWorkspaceFiles": {
      "default": true,
      "markdownDescription": "Only spell check files that are in the currently open workspace.\nThis same effect can be achieved using the `files` setting.\n\n```\n\"cSpell.files\": [\"**\", \"**​/.*\", \"**​/.*​/**\"]\n```",
      "scope": "window",
      "title": "Spell Check Only Workspace Files",
      "type": "boolean"
    },
    "usePnP": {
      "description": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence of a PnP file and load it.",
      "scope": "resource",
      "type": "boolean"
    },
    "userWords": {
      "description": "Words to add to global dictionary -- should only be in the user config file.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "words": {
      "description": "list of words to be always considered correct",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "workspaceRootPath": {
      "markdownDescription": "Define the path to the workspace root folder in a multi-root workspace.\nBy default it is the first folder.\n\nThis is used to find the `cspell.json` file for the workspace.\n\nExample: use the `client` folder\n```\n${workspaceFolder:client}\n```",
      "scope": "resource",
      "title": "Workspace Root Folder Path",
      "type": "string"
    }
  },
  "type": "object"
}