{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {},
  "items": [
    {
      "additionalProperties": false,
      "description": "Settings that control the behavior of the spell checker.",
      "order": 0,
      "properties": {
        "cSpell.enabled": {
          "default": true,
          "description": "Enable / Disable the spell checker.",
          "markdownDescription": "Enable / Disable the spell checker.",
          "scope": "resource",
          "type": "boolean"
        }
      },
      "title": "Code Spell Checker",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Advanced settings that are not commonly used.",
      "order": 18,
      "properties": {
        "cSpell.advanced.feature.useReferenceProviderRemove": {
          "description": "Used to work around bugs in Reference Providers and Rename Providers. Anything matching the provided Regular Expression will be removed from the text before sending it to the Rename Provider.\n\nSee: [Markdown: Fixing spelling issues in Header sections changes the entire line · Issue #1987](https://github.com/streetsidesoftware/vscode-spell-checker/issues/1987)\n\nIt is unlikely that you would need to edit this setting. If you need to, please open an issue at [Spell Checker Issues](https://github.com/streetsidesoftware/vscode-spell-checker/issues)\n\nThis feature is used in connection with `#cSpell.advanced.feature.useReferenceProviderWithRename#`",
          "markdownDescription": "Used to work around bugs in Reference Providers and Rename Providers.\nAnything matching the provided Regular Expression will be removed from the text\nbefore sending it to the Rename Provider.\n\nSee: [Markdown: Fixing spelling issues in Header sections changes the entire line · Issue #1987](https://github.com/streetsidesoftware/vscode-spell-checker/issues/1987)\n\nIt is unlikely that you would need to edit this setting. If you need to, please open an issue at\n[Spell Checker Issues](https://github.com/streetsidesoftware/vscode-spell-checker/issues)\n\nThis feature is used in connection with `#cSpell.advanced.feature.useReferenceProviderWithRename#`",
          "scope": "language-overridable",
          "title": "Remove Matching Characters Before Rename",
          "type": "string"
        },
        "cSpell.advanced.feature.useReferenceProviderWithRename": {
          "default": false,
          "description": "Use the Reference Provider when fixing spelling issues with the Rename Provider. This feature is used in connection with `#cSpell.fixSpellingWithRenameProvider#`",
          "markdownDescription": "Use the Reference Provider when fixing spelling issues with the Rename Provider.\nThis feature is used in connection with `#cSpell.fixSpellingWithRenameProvider#`",
          "scope": "language-overridable",
          "title": "Use Reference Provider During Rename",
          "type": "boolean"
        },
        "cSpell.fixSpellingWithRenameProvider": {
          "default": true,
          "description": "Use Rename Provider when fixing spelling issues.",
          "markdownDescription": "Use Rename Provider when fixing spelling issues.",
          "scope": "language-overridable",
          "type": "boolean"
        },
        "cSpell.logFile": {
          "description": "Have the logs written to a file instead of to VS Code.",
          "markdownDescription": "Have the logs written to a file instead of to VS Code.",
          "scope": "window",
          "title": "Write Logs to a File",
          "type": "string"
        },
        "cSpell.logLevel": {
          "default": "Error",
          "description": "Set the Debug Level for logging messages.",
          "enum": [
            "None",
            "Error",
            "Warning",
            "Information",
            "Debug"
          ],
          "enumDescriptions": [
            "Do not log",
            "Log only errors",
            "Log errors and warnings",
            "Log errors, warnings, and info",
            "Log everything (noisy)"
          ],
          "markdownDescription": "Set the Debug Level for logging messages.",
          "scope": "window",
          "title": "Set Logging Level",
          "type": "string"
        },
        "cSpell.trustedWorkspace": {
          "default": true,
          "description": "Enable loading JavaScript CSpell configuration files.\n\nThis setting is automatically set to `true` in a trusted workspace. It is possible to override the setting to `false` in a trusted workspace, but a setting of `true` in an untrusted workspace will be ignored.\n\nSee:\n- [Visual Studio Code Workspace Trust security](https://code.visualstudio.com/docs/editor/workspace-trust)\n- [Workspace Trust Extension Guide -- Visual Studio Code Extension API](https://code.visualstudio.com/api/extension-guides/workspace-trust)",
          "markdownDescription": "Enable loading JavaScript CSpell configuration files.\n\nThis setting is automatically set to `true` in a trusted workspace. It is possible to override the setting to `false` in a trusted workspace,\nbut a setting of `true` in an untrusted workspace will be ignored.\n\nSee:\n- [Visual Studio Code Workspace Trust security](https://code.visualstudio.com/docs/editor/workspace-trust)\n- [Workspace Trust Extension Guide -- Visual Studio Code Extension API](https://code.visualstudio.com/api/extension-guides/workspace-trust)",
          "scope": "window",
          "since": "4.0.0",
          "type": "boolean"
        }
      },
      "title": "Advanced",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Settings related to CSpell Command Line Tool.",
      "order": 5,
      "properties": {
        "cSpell.ignoreRandomStrings": {
          "default": true,
          "description": "Ignore sequences of characters that look like random strings.",
          "markdownDescription": "Ignore sequences of characters that look like random strings.",
          "type": "boolean"
        },
        "cSpell.ignoreRegExpList": {
          "description": "List of regular expressions or Pattern names (defined in `#cSpell.patterns#`) to exclude from spell checking.\n\n- When using the VS Code Preferences UI, it is not necessary to escape the `\\`, VS Code takes care of that.\n- When editing the VS Code `settings.json` file,   it is necessary to escape `\\`.   Each `\\` becomes `\\\\`.\n\nThe default regular expression flags are `gi`. Add `u` (`gui`), to enable Unicode.\n\n| VS Code UI          | settings.json         | Description                                  | | :------------------ | :-------------------- | :------------------------------------------- | | `/\\\\[a-z]+/gi`      | `/\\\\\\\\[a-z]+/gi`      | Exclude LaTeX command like `\\mapsto`         | | `/\\b[A-Z]{3,5}\\b/g` | `/\\\\b[A-Z]{3,5}\\\\b/g` | Exclude full-caps acronyms of 3-5 length.    | | `CStyleComment`     | `CStyleComment`       | A built in pattern                           |",
          "items": {
            "type": "string"
          },
          "markdownDescription": "List of regular expressions or Pattern names (defined in `#cSpell.patterns#`) to exclude from spell checking.\n\n- When using the VS Code Preferences UI, it is not necessary to escape the `\\`, VS Code takes care of that.\n- When editing the VS Code `settings.json` file,\n  it is necessary to escape `\\`.\n  Each `\\` becomes `\\\\`.\n\nThe default regular expression flags are `gi`. Add `u` (`gui`), to enable Unicode.\n\n| VS Code UI          | settings.json         | Description                                  |\n| :------------------ | :-------------------- | :------------------------------------------- |\n| `/\\\\[a-z]+/gi`      | `/\\\\\\\\[a-z]+/gi`      | Exclude LaTeX command like `\\mapsto`         |\n| `/\\b[A-Z]{3,5}\\b/g` | `/\\\\b[A-Z]{3,5}\\\\b/g` | Exclude full-caps acronyms of 3-5 length.    |\n| `CStyleComment`     | `CStyleComment`       | A built in pattern                           |",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.includeRegExpList": {
          "description": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.",
          "items": {
            "type": "string"
          },
          "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.minRandomLength": {
          "default": 40,
          "description": "The minimum length of a random string to be ignored.",
          "markdownDescription": "The minimum length of a random string to be ignored.",
          "type": "number"
        },
        "cSpell.overrides": {
          "description": "Overrides are used to apply settings for specific files in your project.\n\n**Example:**\n\n```jsonc \"cSpell.overrides\": [   // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:   {     \"filename\": \"**/{*.hrr,*.crr}\",     \"languageId\": \"cpp\"   },   // Force `dutch/**/*.txt` to be treated as Dutch (dictionary needs to be installed separately):   {     \"filename\": \"**/dutch/**/*.txt\",     \"language\": \"nl\"   } ] ```",
          "items": {
            "additionalProperties": false,
            "properties": {
              "allowCompoundWords": {
                "default": false,
                "description": "True to enable compound word checking.",
                "markdownDescription": "True to enable compound word checking.",
                "type": "boolean"
              },
              "caseSensitive": {
                "default": false,
                "description": "Determines if words must match case and accent rules.\n\nSee [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.\n\n- `false` - Case is ignored and accents can be missing on the entire word.   Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                "markdownDescription": "Determines if words must match case and accent rules.\n\nSee [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                "type": "boolean"
              },
              "description": {
                "description": "Optional description of configuration.",
                "markdownDescription": "Optional description of configuration.",
                "type": "string"
              },
              "diagnosticLevel": {
                "default": "Information",
                "description": "The Diagnostic Severity Level determines how issues are shown in the Problems Pane and within the document. Set the level to `Hint` to hide the issues from the Problems Pane.\n\nNote: `#cSpell.useCustomDecorations#` must be `false` to use VS Code Diagnostic Severity Levels.\n\nSee: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)",
                "enum": [
                  "Error",
                  "Warning",
                  "Information",
                  "Hint"
                ],
                "enumDescriptions": [
                  "Report Spelling Issues as Errors",
                  "Report Spelling Issues as Warnings",
                  "Report Spelling Issues as Information",
                  "Report Spelling Issues as Hints, will not show up in Problems"
                ],
                "markdownDescription": "The Diagnostic Severity Level determines how issues are shown in the Problems Pane and within the document.\nSet the level to `Hint` to hide the issues from the Problems Pane.\n\nNote: `#cSpell.useCustomDecorations#` must be `false` to use VS Code Diagnostic Severity Levels.\n\nSee: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)",
                "scope": "resource",
                "title": "Set Diagnostic Reporting Level",
                "type": "string"
              },
              "diagnosticLevelFlaggedWords": {
                "description": "Flagged word issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle. By default, flagged words will use the same diagnostic level as general issues. Use this setting to customize them.\n\nSee: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)",
                "enum": [
                  "Error",
                  "Warning",
                  "Information",
                  "Hint"
                ],
                "enumDescriptions": [
                  "Report Spelling Issues as Errors",
                  "Report Spelling Issues as Warnings",
                  "Report Spelling Issues as Information",
                  "Report Spelling Issues as Hints, will not show up in Problems"
                ],
                "markdownDescription": "Flagged word issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle.\nBy default, flagged words will use the same diagnostic level as general issues. Use this setting to customize them.\n\nSee: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)",
                "scope": "resource",
                "since": "4.0.0",
                "title": "Set Diagnostic Reporting Level for Flagged Words",
                "type": "string"
              },
              "dictionaries": {
                "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/) and [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                "items": {
                  "anyOf": [
                    {
                      "description": "This a reference to a named dictionary. It is expected to match the name of a dictionary.",
                      "markdownDescription": "This a reference to a named dictionary.\nIt is expected to match the name of a dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    {
                      "description": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.    Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.    Overrides `!!<dictionary_name>`.",
                      "markdownDescription": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.\n   Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.\n   Overrides `!!<dictionary_name>`.",
                      "pattern": "^(?=!+[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    }
                  ],
                  "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                  "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }"
                },
                "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                "type": "array"
              },
              "dictionaryDefinitions": {
                "description": "Define custom dictionaries. If `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js \"cSpell.dictionaryDefinitions\": [   {     \"name\": \"project-words\",     \"path\": \"${workspaceRoot}/project-words.txt\",     \"description\": \"Words used in this project\",     \"addWords\": true   } ] ```",
                "items": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "addWords": {
                          "default": true,
                          "description": "Indicate if this custom dictionary should be used to store added words.",
                          "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                          "title": "Add Words to Dictionary",
                          "type": "boolean"
                        },
                        "description": {
                          "description": "Optional: A human readable description.",
                          "markdownDescription": "Optional: A human readable description.",
                          "title": "Description of the Dictionary",
                          "type": "string"
                        },
                        "ignoreForbiddenWords": {
                          "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                          "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                          "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "title": "Name of Dictionary",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                          "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                          "type": "string"
                        },
                        "scope": {
                          "anyOf": [
                            {
                              "description": "Specifies the scope of a dictionary.",
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            {
                              "items": {
                                "description": "Specifies the scope of a dictionary.",
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "markdownDescription": "Specifies the scope of a dictionary.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                          "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                          "title": "Scope of dictionary"
                        },
                        "supportNonStrictSearches": {
                          "default": true,
                          "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                          "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "description": {
                          "description": "Optional description of the contents / purpose of the dictionary.",
                          "markdownDescription": "Optional description of the contents / purpose of the dictionary.",
                          "type": "string"
                        },
                        "ignoreForbiddenWords": {
                          "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                          "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to the file.",
                          "markdownDescription": "Path to the file.",
                          "type": "string"
                        },
                        "supportNonStrictSearches": {
                          "default": true,
                          "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                          "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "path",
                        "name"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "addWords": {
                          "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                          "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                          "type": "boolean"
                        },
                        "description": {
                          "description": "Optional description of the contents / purpose of the dictionary.",
                          "markdownDescription": "Optional description of the contents / purpose of the dictionary.",
                          "type": "string"
                        },
                        "ignoreForbiddenWords": {
                          "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                          "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to custom dictionary text file.",
                          "markdownDescription": "Path to custom dictionary text file.",
                          "type": "string"
                        },
                        "scope": {
                          "anyOf": [
                            {
                              "description": "Specifies the scope of a dictionary.",
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            {
                              "items": {
                                "description": "Specifies the scope of a dictionary.",
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "markdownDescription": "Specifies the scope of a dictionary.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`.",
                          "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                        },
                        "supportNonStrictSearches": {
                          "default": true,
                          "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                          "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "path",
                        "addWords",
                        "name"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "markdownDescription": "Define custom dictionaries.\nIf `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js\n\"cSpell.dictionaryDefinitions\": [\n  {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n]\n```",
                "scope": "resource",
                "title": "Dictionary Definitions",
                "type": "array"
              },
              "enableFiletypes": {
                "description": "Enable / Disable checking file types (languageIds).\n\nThese are in additional to the file types specified by  {@link  Settings.enabledLanguageIds } . To disable a language, prefix with `!` as in `!json`,\n\n\n**Example: individual file types**\n\n``` jsonc       // enable checking for jsonc !json       // disable checking for json kotlin      // enable checking for kotlin ```\n\n**Example: enable all file types**\n\n```\n*           // enable checking for all file types !json       // except for json ```",
                "items": {
                  "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                  "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                  "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                  "type": "string"
                },
                "markdownDescription": "Enable / Disable checking file types (languageIds).\n\nThese are in additional to the file types specified by  {@link  Settings.enabledLanguageIds } .\nTo disable a language, prefix with `!` as in `!json`,\n\n\n**Example: individual file types**\n\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```\n\n**Example: enable all file types**\n\n```\n*           // enable checking for all file types\n!json       // except for json\n```",
                "scope": "resource",
                "title": "Enable File Types",
                "type": "array",
                "uniqueItems": true
              },
              "enabled": {
                "default": true,
                "description": "Is the spell checker enabled.",
                "markdownDescription": "Is the spell checker enabled.",
                "type": "boolean"
              },
              "enabledFileTypes": {
                "additionalProperties": {
                  "type": "boolean"
                },
                "description": "Enable / Disable checking file types (languageIds).\n\nThis setting replaces:  {@link  Settings.enabledLanguageIds }  and  {@link  Settings.enableFiletypes } .\n\nA Value of:\n- `true` - enable checking for the file type\n- `false` - disable checking for the file type\n\nA file type of `*` is a wildcard that enables all file types.\n\n**Example: enable all file types**\n\n| File Type | Enabled | Comment | | --------- | ------- | ------- | | `*`       | `true`  | Enable all file types. | | `json`    | `false` | Disable checking for json files. |",
                "markdownDescription": "Enable / Disable checking file types (languageIds).\n\nThis setting replaces:  {@link  Settings.enabledLanguageIds }  and  {@link  Settings.enableFiletypes } .\n\nA Value of:\n- `true` - enable checking for the file type\n- `false` - disable checking for the file type\n\nA file type of `*` is a wildcard that enables all file types.\n\n**Example: enable all file types**\n\n| File Type | Enabled | Comment |\n| --------- | ------- | ------- |\n| `*`       | `true`  | Enable all file types. |\n| `json`    | `false` | Disable checking for json files. |",
                "since": "8.8.1",
                "title": "Enabled File Types to Check",
                "type": "object"
              },
              "enabledLanguageIds": {
                "description": "Specify a list of file types to spell check. It is better to use  {@link  Settings.enabledFileTypes }  to Enable / Disable checking files types.",
                "items": {
                  "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                  "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                  "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                  "type": "string"
                },
                "markdownDescription": "Specify a list of file types to spell check. It is better to use  {@link  Settings.enabledFileTypes }  to Enable / Disable checking files types.",
                "title": "Enabled Language Ids",
                "type": "array",
                "uniqueItems": true
              },
              "filename": {
                "anyOf": [
                  {
                    "description": "These are glob expressions.",
                    "markdownDescription": "These are glob expressions.",
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "These are glob expressions.",
                      "markdownDescription": "These are glob expressions.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "description": "Glob pattern or patterns to match against.",
                "markdownDescription": "Glob pattern or patterns to match against."
              },
              "flagWords": {
                "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                "type": "array"
              },
              "id": {
                "description": "Optional identifier.",
                "markdownDescription": "Optional identifier.",
                "type": "string"
              },
              "ignoreRandomStrings": {
                "default": true,
                "description": "Ignore sequences of characters that look like random strings.",
                "markdownDescription": "Ignore sequences of characters that look like random strings.",
                "type": "boolean"
              },
              "ignoreRegExpList": {
                "description": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON ```json \"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"] ```\n\nYAML ```yaml ignoreRegExpList:   - >-    /\\b[A-Z]+\\b/g ```\n\nBy default, several patterns are excluded. See [Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "description": "This matches the name in a pattern definition.",
                      "markdownDescription": "This matches the name in a pattern definition.",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Base64",
                        "Base64MultiLine",
                        "Base64SingleLine",
                        "CStyleComment",
                        "CStyleHexValue",
                        "CSSHexValue",
                        "CommitHash",
                        "CommitHashLink",
                        "Email",
                        "EscapeCharacters",
                        "HexValues",
                        "href",
                        "PhpHereDoc",
                        "PublicKey",
                        "RsaCert",
                        "SshRsa",
                        "SHA",
                        "HashStrings",
                        "SpellCheckerDisable",
                        "SpellCheckerDisableBlock",
                        "SpellCheckerDisableLine",
                        "SpellCheckerDisableNext",
                        "SpellCheckerIgnoreInDocSetting",
                        "string",
                        "UnicodeRef",
                        "Urls",
                        "UUID",
                        "Everything"
                      ],
                      "type": "string"
                    }
                  ],
                  "description": "A PatternRef is a Pattern or PatternId.",
                  "markdownDescription": "A PatternRef is a Pattern or PatternId."
                },
                "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "type": "array"
              },
              "ignoreWords": {
                "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                "type": "array"
              },
              "includeRegExpList": {
                "description": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "description": "This matches the name in a pattern definition.",
                      "markdownDescription": "This matches the name in a pattern definition.",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Base64",
                        "Base64MultiLine",
                        "Base64SingleLine",
                        "CStyleComment",
                        "CStyleHexValue",
                        "CSSHexValue",
                        "CommitHash",
                        "CommitHashLink",
                        "Email",
                        "EscapeCharacters",
                        "HexValues",
                        "href",
                        "PhpHereDoc",
                        "PublicKey",
                        "RsaCert",
                        "SshRsa",
                        "SHA",
                        "HashStrings",
                        "SpellCheckerDisable",
                        "SpellCheckerDisableBlock",
                        "SpellCheckerDisableLine",
                        "SpellCheckerDisableNext",
                        "SpellCheckerIgnoreInDocSetting",
                        "string",
                        "UnicodeRef",
                        "Urls",
                        "UUID",
                        "Everything"
                      ],
                      "type": "string"
                    }
                  ],
                  "description": "A PatternRef is a Pattern or PatternId.",
                  "markdownDescription": "A PatternRef is a Pattern or PatternId."
                },
                "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "type": "array"
              },
              "language": {
                "description": "Sets the locale.",
                "markdownDescription": "Sets the locale.",
                "type": "string"
              },
              "languageId": {
                "anyOf": [
                  {
                    "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                    "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                    "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                    "type": "string"
                  },
                  {
                    "description": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                    "markdownDescription": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                    "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                    "type": "string"
                  },
                  {
                    "description": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                    "markdownDescription": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                    "pattern": "^(![-\\w_\\s]+)(,!?[-\\w_\\s]+)*$",
                    "type": "string"
                  },
                  {
                    "items": {
                      "anyOf": [
                        {
                          "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                          "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                          "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                          "type": "string"
                        },
                        {
                          "description": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                          "markdownDescription": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                          "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                          "type": "string"
                        },
                        {
                          "description": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                          "markdownDescription": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                          "pattern": "^(![-\\w_\\s]+)(,!?[-\\w_\\s]+)*$",
                          "type": "string"
                        }
                      ]
                    },
                    "type": "array"
                  }
                ],
                "description": "Sets the programming language id to match file type.",
                "markdownDescription": "Sets the programming language id to match file type."
              },
              "languageSettings": {
                "description": "Additional settings for individual programming languages and locales.",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "allowCompoundWords": {
                      "default": false,
                      "description": "True to enable compound word checking.",
                      "markdownDescription": "True to enable compound word checking.",
                      "type": "boolean"
                    },
                    "caseSensitive": {
                      "default": false,
                      "description": "Determines if words must match case and accent rules.\n\nSee [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.\n\n- `false` - Case is ignored and accents can be missing on the entire word.   Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                      "markdownDescription": "Determines if words must match case and accent rules.\n\nSee [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                      "type": "boolean"
                    },
                    "description": {
                      "description": "Optional description of configuration.",
                      "markdownDescription": "Optional description of configuration.",
                      "type": "string"
                    },
                    "dictionaries": {
                      "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/) and [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                      "items": {
                        "anyOf": [
                          {
                            "description": "This a reference to a named dictionary. It is expected to match the name of a dictionary.",
                            "markdownDescription": "This a reference to a named dictionary.\nIt is expected to match the name of a dictionary.",
                            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "type": "string"
                          },
                          {
                            "description": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.    Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.    Overrides `!!<dictionary_name>`.",
                            "markdownDescription": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.\n   Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.\n   Overrides `!!<dictionary_name>`.",
                            "pattern": "^(?=!+[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "type": "string"
                          }
                        ],
                        "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                        "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }"
                      },
                      "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                      "type": "array"
                    },
                    "dictionaryDefinitions": {
                      "description": "Define custom dictionaries. If `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js \"cSpell.dictionaryDefinitions\": [   {     \"name\": \"project-words\",     \"path\": \"${workspaceRoot}/project-words.txt\",     \"description\": \"Words used in this project\",     \"addWords\": true   } ] ```",
                      "items": {
                        "anyOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "addWords": {
                                "default": true,
                                "description": "Indicate if this custom dictionary should be used to store added words.",
                                "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                                "title": "Add Words to Dictionary",
                                "type": "boolean"
                              },
                              "description": {
                                "description": "Optional: A human readable description.",
                                "markdownDescription": "Optional: A human readable description.",
                                "title": "Description of the Dictionary",
                                "type": "string"
                              },
                              "ignoreForbiddenWords": {
                                "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                                "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                                "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                "title": "Name of Dictionary",
                                "type": "string"
                              },
                              "noSuggest": {
                                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                                "type": "boolean"
                              },
                              "path": {
                                "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                                "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                                "type": "string"
                              },
                              "scope": {
                                "anyOf": [
                                  {
                                    "description": "Specifies the scope of a dictionary.",
                                    "enum": [
                                      "user",
                                      "workspace",
                                      "folder"
                                    ],
                                    "markdownDescription": "Specifies the scope of a dictionary.",
                                    "type": "string"
                                  },
                                  {
                                    "items": {
                                      "description": "Specifies the scope of a dictionary.",
                                      "enum": [
                                        "user",
                                        "workspace",
                                        "folder"
                                      ],
                                      "markdownDescription": "Specifies the scope of a dictionary.",
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                ],
                                "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                                "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                                "title": "Scope of dictionary"
                              },
                              "supportNonStrictSearches": {
                                "default": true,
                                "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                                "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "name",
                              "path"
                            ],
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "description": {
                                "description": "Optional description of the contents / purpose of the dictionary.",
                                "markdownDescription": "Optional description of the contents / purpose of the dictionary.",
                                "type": "string"
                              },
                              "ignoreForbiddenWords": {
                                "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                                "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                "type": "string"
                              },
                              "noSuggest": {
                                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                                "type": "boolean"
                              },
                              "path": {
                                "description": "Path to the file.",
                                "markdownDescription": "Path to the file.",
                                "type": "string"
                              },
                              "supportNonStrictSearches": {
                                "default": true,
                                "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                                "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "path",
                              "name"
                            ],
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "addWords": {
                                "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                                "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                                "type": "boolean"
                              },
                              "description": {
                                "description": "Optional description of the contents / purpose of the dictionary.",
                                "markdownDescription": "Optional description of the contents / purpose of the dictionary.",
                                "type": "string"
                              },
                              "ignoreForbiddenWords": {
                                "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                                "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                "type": "string"
                              },
                              "noSuggest": {
                                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                                "type": "boolean"
                              },
                              "path": {
                                "description": "Path to custom dictionary text file.",
                                "markdownDescription": "Path to custom dictionary text file.",
                                "type": "string"
                              },
                              "scope": {
                                "anyOf": [
                                  {
                                    "description": "Specifies the scope of a dictionary.",
                                    "enum": [
                                      "user",
                                      "workspace",
                                      "folder"
                                    ],
                                    "markdownDescription": "Specifies the scope of a dictionary.",
                                    "type": "string"
                                  },
                                  {
                                    "items": {
                                      "description": "Specifies the scope of a dictionary.",
                                      "enum": [
                                        "user",
                                        "workspace",
                                        "folder"
                                      ],
                                      "markdownDescription": "Specifies the scope of a dictionary.",
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                ],
                                "description": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`.",
                                "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                              },
                              "supportNonStrictSearches": {
                                "default": true,
                                "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                                "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "path",
                              "addWords",
                              "name"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "markdownDescription": "Define custom dictionaries.\nIf `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js\n\"cSpell.dictionaryDefinitions\": [\n  {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n]\n```",
                      "scope": "resource",
                      "title": "Dictionary Definitions",
                      "type": "array"
                    },
                    "enabled": {
                      "default": true,
                      "description": "Is the spell checker enabled.",
                      "markdownDescription": "Is the spell checker enabled.",
                      "type": "boolean"
                    },
                    "flagWords": {
                      "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                      "type": "array"
                    },
                    "id": {
                      "description": "Optional identifier.",
                      "markdownDescription": "Optional identifier.",
                      "type": "string"
                    },
                    "ignoreRegExpList": {
                      "description": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON ```json \"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"] ```\n\nYAML ```yaml ignoreRegExpList:   - >-    /\\b[A-Z]+\\b/g ```\n\nBy default, several patterns are excluded. See [Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "description": "This matches the name in a pattern definition.",
                            "markdownDescription": "This matches the name in a pattern definition.",
                            "type": "string"
                          },
                          {
                            "enum": [
                              "Base64",
                              "Base64MultiLine",
                              "Base64SingleLine",
                              "CStyleComment",
                              "CStyleHexValue",
                              "CSSHexValue",
                              "CommitHash",
                              "CommitHashLink",
                              "Email",
                              "EscapeCharacters",
                              "HexValues",
                              "href",
                              "PhpHereDoc",
                              "PublicKey",
                              "RsaCert",
                              "SshRsa",
                              "SHA",
                              "HashStrings",
                              "SpellCheckerDisable",
                              "SpellCheckerDisableBlock",
                              "SpellCheckerDisableLine",
                              "SpellCheckerDisableNext",
                              "SpellCheckerIgnoreInDocSetting",
                              "string",
                              "UnicodeRef",
                              "Urls",
                              "UUID",
                              "Everything"
                            ],
                            "type": "string"
                          }
                        ],
                        "description": "A PatternRef is a Pattern or PatternId.",
                        "markdownDescription": "A PatternRef is a Pattern or PatternId."
                      },
                      "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                      "type": "array"
                    },
                    "ignoreWords": {
                      "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                      "type": "array"
                    },
                    "includeRegExpList": {
                      "description": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "description": "This matches the name in a pattern definition.",
                            "markdownDescription": "This matches the name in a pattern definition.",
                            "type": "string"
                          },
                          {
                            "enum": [
                              "Base64",
                              "Base64MultiLine",
                              "Base64SingleLine",
                              "CStyleComment",
                              "CStyleHexValue",
                              "CSSHexValue",
                              "CommitHash",
                              "CommitHashLink",
                              "Email",
                              "EscapeCharacters",
                              "HexValues",
                              "href",
                              "PhpHereDoc",
                              "PublicKey",
                              "RsaCert",
                              "SshRsa",
                              "SHA",
                              "HashStrings",
                              "SpellCheckerDisable",
                              "SpellCheckerDisableBlock",
                              "SpellCheckerDisableLine",
                              "SpellCheckerDisableNext",
                              "SpellCheckerIgnoreInDocSetting",
                              "string",
                              "UnicodeRef",
                              "Urls",
                              "UUID",
                              "Everything"
                            ],
                            "type": "string"
                          }
                        ],
                        "description": "A PatternRef is a Pattern or PatternId.",
                        "markdownDescription": "A PatternRef is a Pattern or PatternId."
                      },
                      "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                      "type": "array"
                    },
                    "languageId": {
                      "anyOf": [
                        {
                          "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                          "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                          "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                          "type": "string"
                        },
                        {
                          "description": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                          "markdownDescription": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                          "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                          "type": "string"
                        },
                        {
                          "description": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                          "markdownDescription": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                          "pattern": "^(![-\\w_\\s]+)(,!?[-\\w_\\s]+)*$",
                          "type": "string"
                        },
                        {
                          "items": {
                            "anyOf": [
                              {
                                "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                                "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                                "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                                "type": "string"
                              },
                              {
                                "description": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                                "markdownDescription": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                                "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                                "type": "string"
                              },
                              {
                                "description": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                                "markdownDescription": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                                "pattern": "^(![-\\w_\\s]+)(,!?[-\\w_\\s]+)*$",
                                "type": "string"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      ],
                      "description": "The language id.  Ex: `typescript`, `html`, or `php`.  `*` -- will match all languages.",
                      "markdownDescription": "The language id.  Ex: `typescript`, `html`, or `php`.  `*` -- will match all languages."
                    },
                    "locale": {
                      "anyOf": [
                        {
                          "description": "This is a written language locale like: `en`, `en-GB`, `fr`, `es`, `de` or `en,fr` for both English and French",
                          "markdownDescription": "This is a written language locale like: `en`, `en-GB`, `fr`, `es`, `de` or `en,fr` for both English and French",
                          "type": "string"
                        },
                        {
                          "items": {
                            "description": "This is a written language locale like: `en`, `en-GB`, `fr`, `es`, `de` or `en,fr` for both English and French",
                            "markdownDescription": "This is a written language locale like: `en`, `en-GB`, `fr`, `es`, `de` or `en,fr` for both English and French",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "The locale filter, matches against the language. This can be a comma separated list. `*` will match all locales.",
                      "markdownDescription": "The locale filter, matches against the language. This can be a comma separated list. `*` will match all locales."
                    },
                    "name": {
                      "description": "Optional name of configuration.",
                      "markdownDescription": "Optional name of configuration.",
                      "type": "string"
                    },
                    "noSuggestDictionaries": {
                      "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
                      "items": {
                        "anyOf": [
                          {
                            "description": "This a reference to a named dictionary. It is expected to match the name of a dictionary.",
                            "markdownDescription": "This a reference to a named dictionary.\nIt is expected to match the name of a dictionary.",
                            "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "type": "string"
                          },
                          {
                            "description": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.    Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.    Overrides `!!<dictionary_name>`.",
                            "markdownDescription": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.\n   Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.\n   Overrides `!!<dictionary_name>`.",
                            "pattern": "^(?=!+[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                            "type": "string"
                          }
                        ],
                        "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                        "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }"
                      },
                      "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                      "type": "array"
                    },
                    "patterns": {
                      "description": "Defines a list of patterns that can be used with the  {@link  ignoreRegExpList }  and  {@link  includeRegExpList }  options.\n\nFor example:\n\n```javascript \"ignoreRegExpList\": [\"comments\"], \"patterns\": [   {     \"name\": \"comment-single-line\",     \"pattern\": \"/#.*/g\"   },   {     \"name\": \"comment-multi-line\",     \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"   },   // You can also combine multiple named patterns into one single named pattern   {     \"name\": \"comments\",     \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]   } ] ```",
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "description": {
                            "description": "Description of the pattern.",
                            "markdownDescription": "Description of the pattern.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                            "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                            "type": "string"
                          },
                          "pattern": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            ],
                            "description": "RegExp pattern or array of RegExp patterns.",
                            "markdownDescription": "RegExp pattern or array of RegExp patterns."
                          }
                        },
                        "required": [
                          "name",
                          "pattern"
                        ],
                        "type": "object"
                      },
                      "markdownDescription": "Defines a list of patterns that can be used with the  {@link  ignoreRegExpList }  and\n {@link  includeRegExpList }  options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```",
                      "type": "array"
                    },
                    "suggestWords": {
                      "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                      "type": "array"
                    },
                    "words": {
                      "description": "List of words to be considered correct.",
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "List of words to be considered correct.",
                      "type": "array"
                    }
                  },
                  "required": [
                    "languageId"
                  ],
                  "type": "object"
                },
                "markdownDescription": "Additional settings for individual programming languages and locales.",
                "scope": "resource",
                "type": "array"
              },
              "loadDefaultConfiguration": {
                "default": true,
                "description": "By default, the bundled dictionary configurations are loaded. Explicitly setting this to `false` will prevent ALL default configuration from being loaded.",
                "markdownDescription": "By default, the bundled dictionary configurations are loaded. Explicitly setting this to `false`\nwill prevent ALL default configuration from being loaded.",
                "type": "boolean"
              },
              "maxDuplicateProblems": {
                "default": 5,
                "description": "The maximum number of times the same word can be flagged as an error in a file.",
                "markdownDescription": "The maximum number of times the same word can be flagged as an error in a file.",
                "type": "number"
              },
              "maxNumberOfProblems": {
                "default": 10000,
                "description": "The maximum number of problems to report in a file.",
                "markdownDescription": "The maximum number of problems to report in a file.",
                "type": "number"
              },
              "minRandomLength": {
                "default": 40,
                "description": "The minimum length of a random string to be ignored.",
                "markdownDescription": "The minimum length of a random string to be ignored.",
                "type": "number"
              },
              "minWordLength": {
                "default": 4,
                "description": "The minimum length of a word before checking it against a dictionary.",
                "markdownDescription": "The minimum length of a word before checking it against a dictionary.",
                "type": "number"
              },
              "name": {
                "description": "Optional name of configuration.",
                "markdownDescription": "Optional name of configuration.",
                "type": "string"
              },
              "noSuggestDictionaries": {
                "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
                "items": {
                  "anyOf": [
                    {
                      "description": "This a reference to a named dictionary. It is expected to match the name of a dictionary.",
                      "markdownDescription": "This a reference to a named dictionary.\nIt is expected to match the name of a dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    {
                      "description": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.    Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.    Overrides `!!<dictionary_name>`.",
                      "markdownDescription": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.\n   Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.\n   Overrides `!!<dictionary_name>`.",
                      "pattern": "^(?=!+[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    }
                  ],
                  "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                  "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }"
                },
                "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                "type": "array"
              },
              "numSuggestions": {
                "default": 10,
                "description": "Number of suggestions to make.",
                "markdownDescription": "Number of suggestions to make.",
                "type": "number"
              },
              "patterns": {
                "description": "Defines a list of patterns that can be used with the  {@link  ignoreRegExpList }  and  {@link  includeRegExpList }  options.\n\nFor example:\n\n```javascript \"ignoreRegExpList\": [\"comments\"], \"patterns\": [   {     \"name\": \"comment-single-line\",     \"pattern\": \"/#.*/g\"   },   {     \"name\": \"comment-multi-line\",     \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"   },   // You can also combine multiple named patterns into one single named pattern   {     \"name\": \"comments\",     \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]   } ] ```",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "description": "Description of the pattern.",
                      "markdownDescription": "Description of the pattern.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                      "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                      "type": "string"
                    },
                    "pattern": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "RegExp pattern or array of RegExp patterns.",
                      "markdownDescription": "RegExp pattern or array of RegExp patterns."
                    }
                  },
                  "required": [
                    "name",
                    "pattern"
                  ],
                  "type": "object"
                },
                "markdownDescription": "Defines a list of patterns that can be used with the  {@link  ignoreRegExpList }  and\n {@link  includeRegExpList }  options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```",
                "type": "array"
              },
              "pnpFiles": {
                "default": [
                  ".pnp.js",
                  ".pnp.cjs"
                ],
                "description": "The PnP files to search for. Note: `.mjs` files are not currently supported.",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "The PnP files to search for. Note: `.mjs` files are not currently supported.",
                "type": "array"
              },
              "suggestWords": {
                "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                "type": "array"
              },
              "suggestionNumChanges": {
                "default": 3,
                "description": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
                "markdownDescription": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
                "type": "number"
              },
              "suggestionsTimeout": {
                "default": 500,
                "description": "The maximum amount of time in milliseconds to generate suggestions for a word.",
                "markdownDescription": "The maximum amount of time in milliseconds to generate suggestions for a word.",
                "type": "number"
              },
              "usePnP": {
                "default": false,
                "description": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence of a PnP file and load it.",
                "markdownDescription": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading\npackages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence\nof a PnP file and load it.",
                "type": "boolean"
              },
              "words": {
                "description": "List of words to be considered correct.",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "List of words to be considered correct.",
                "type": "array"
              }
            },
            "required": [
              "filename"
            ],
            "type": "object"
          },
          "markdownDescription": "Overrides are used to apply settings for specific files in your project.\n\n**Example:**\n\n```jsonc\n\"cSpell.overrides\": [\n  // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:\n  {\n    \"filename\": \"**/{*.hrr,*.crr}\",\n    \"languageId\": \"cpp\"\n  },\n  // Force `dutch/**/*.txt` to be treated as Dutch (dictionary needs to be installed separately):\n  {\n    \"filename\": \"**/dutch/**/*.txt\",\n    \"language\": \"nl\"\n  }\n]\n```",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.patterns": {
          "description": "Defines a list of patterns that can be used with the `#cSpell.ignoreRegExpList#` and `#cSpell.includeRegExpList#` options.\n\n**Example:**\n\n```jsonc \"cSpell.patterns\": [   {     \"name\": \"comment-single-line\",     \"pattern\": \"/#.*/g\"   },   {     \"name\": \"comment-multi-line\",     \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"   } ] ```",
          "items": {
            "additionalProperties": false,
            "properties": {
              "description": {
                "description": "Description of the pattern.",
                "markdownDescription": "Description of the pattern.",
                "type": "string"
              },
              "name": {
                "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                "type": "string"
              },
              "pattern": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "description": "RegExp pattern or array of RegExp patterns.",
                "markdownDescription": "RegExp pattern or array of RegExp patterns."
              }
            },
            "required": [
              "name",
              "pattern"
            ],
            "type": "object"
          },
          "markdownDescription": "Defines a list of patterns that can be used with the `#cSpell.ignoreRegExpList#` and\n`#cSpell.includeRegExpList#` options.\n\n**Example:**\n\n```jsonc\n\"cSpell.patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  }\n]\n```",
          "scope": "resource",
          "type": "array"
        }
      },
      "title": "CSpell",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Experimental settings that may change or be removed in the future.",
      "order": 19,
      "properties": {
        "cSpell.experimental.enableRegexpView": {
          "default": false,
          "description": "Show Regular Expression Explorer",
          "markdownDescription": "Show Regular Expression Explorer",
          "scope": "application",
          "type": "boolean"
        },
        "cSpell.experimental.symbols": {
          "default": false,
          "description": "Experiment with executeDocumentSymbolProvider. This feature is experimental and will be removed in the future.",
          "markdownDescription": "Experiment with executeDocumentSymbolProvider.\nThis feature is experimental and will be removed in the future.",
          "scope": "application",
          "title": "Experiment with `executeDocumentSymbolProvider`",
          "type": "boolean"
        },
        "cSpell.reportUnknownWords": {
          "default": true,
          "description": "By default, the spell checker reports all unknown words as misspelled. This setting allows for a more relaxed spell checking, by only reporting unknown words as suggestions. Common spelling errors are still flagged as misspelled.\n\n- `true` - report unknown words as misspelled\n- `false` - report unknown words as suggestions",
          "markdownDescription": "By default, the spell checker reports all unknown words as misspelled. This setting allows for a more relaxed spell checking, by only\nreporting unknown words as suggestions. Common spelling errors are still flagged as misspelled.\n\n- `true` - report unknown words as misspelled\n- `false` - report unknown words as suggestions",
          "scope": "language-overridable",
          "since": "4.0.2",
          "title": "Strict Spell Checking",
          "type": "boolean"
        }
      },
      "title": "Experimental",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Settings that control which files and folders are spell checked.",
      "order": 3,
      "properties": {
        "cSpell.allowedSchemas": {
          "deprecated": true,
          "deprecationMessage": "- Use `#cSpell.enabledSchemes#` instead.",
          "description": "Control which file schemes will be checked for spelling (VS Code must be restarted for this setting to take effect).\n\n\nSome schemes have special meaning like:\n- `untitled` - Used for new documents that have not yet been saved\n- `vscode-notebook-cell` - Used for validating segments of a Notebook.\n- `vscode-userdata` - Needed to spell check `.code-snippets`\n- `vscode-scm` - Needed to spell check Source Control commit messages.\n- `comment` - Used for new comment editors.",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Control which file schemes will be checked for spelling (VS Code must be restarted for this setting to take effect).\n\n\nSome schemes have special meaning like:\n- `untitled` - Used for new documents that have not yet been saved\n- `vscode-notebook-cell` - Used for validating segments of a Notebook.\n- `vscode-userdata` - Needed to spell check `.code-snippets`\n- `vscode-scm` - Needed to spell check Source Control commit messages.\n- `comment` - Used for new comment editors.",
          "scope": "window",
          "title": "Define Allowed Schemes",
          "type": "array"
        },
        "cSpell.checkOnlyEnabledFileTypes": {
          "default": true,
          "description": "By default, the spell checker checks only enabled file types. Use `#cSpell.enableFiletypes#` to turn on / off various file types.\n\nWhen this setting is `false`, all file types are checked except for the ones disabled by `#cSpell.enabledFileTypes#`. See `#cSpell.enableFiletypes#` on how to disable a file type.",
          "markdownDescription": "By default, the spell checker checks only enabled file types. Use `#cSpell.enableFiletypes#`\nto turn on / off various file types.\n\nWhen this setting is `false`, all file types are checked except for the ones disabled by `#cSpell.enabledFileTypes#`.\nSee `#cSpell.enableFiletypes#` on how to disable a file type.",
          "scope": "resource",
          "title": "Check Only Enabled File Types",
          "type": "boolean"
        },
        "cSpell.checkVSCodeSystemFiles": {
          "default": false,
          "description": "Spell check VS Code system files. These include:\n- `vscode-userdata:/**/settings.json`\n- `vscode-userdata:/**/keybindings.json`",
          "markdownDescription": "Spell check VS Code system files.\nThese include:\n- `vscode-userdata:/**/settings.json`\n- `vscode-userdata:/**/keybindings.json`",
          "scope": "application",
          "type": "boolean"
        },
        "cSpell.enableFiletypes": {
          "deprecated": true,
          "deprecationMessage": "- Use `#cSpell.enabledFileTypes#` instead.",
          "description": "Enable / Disable checking file types (languageIds).\n\nThese are in additional to the file types specified by `#cSpell.enabledLanguageIds#`. To disable a language, prefix with `!` as in `!json`,\n\n\n**Example: individual file types**\n\n``` jsonc       // enable checking for jsonc !json       // disable checking for json kotlin      // enable checking for kotlin ```\n\n**Example: enable all file types**\n\n```\n*           // enable checking for all file types !json       // except for json ```",
          "items": {
            "description": "Enable / Disable checking file types (languageIds). To disable a language, prefix with `!` as in `!json`,\n\n\nExample: ``` jsonc       // enable checking for jsonc !json       // disable checking for json kotlin      // enable checking for kotlin ```",
            "markdownDescription": "Enable / Disable checking file types (languageIds).\nTo disable a language, prefix with `!` as in `!json`,\n\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
            "pattern": "(^!*(?!\\s)[\\s\\w_.\\-]+$)|(^!*[*]$)",
            "patternErrorMessage": "Allowed characters are `a-zA-Z`, `.`, `-`, `_` and space.",
            "type": "string"
          },
          "markdownDescription": "Enable / Disable checking file types (languageIds).\n\nThese are in additional to the file types specified by `#cSpell.enabledLanguageIds#`.\nTo disable a language, prefix with `!` as in `!json`,\n\n\n**Example: individual file types**\n\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```\n\n**Example: enable all file types**\n\n```\n*           // enable checking for all file types\n!json       // except for json\n```",
          "scope": "resource",
          "title": "Enable File Types",
          "type": "array",
          "uniqueItems": true
        },
        "cSpell.enabledFileTypes": {
          "additionalProperties": {
            "type": "boolean"
          },
          "default": {
            "*": true,
            "markdown": true
          },
          "description": "Enable / Disable checking file types (languageIds).\n\nThis setting replaces: `#cSpell.enabledLanguageIds#` and `#cSpell.enableFiletypes#`.\n\nA Value of:\n- `true` - enable checking for the file type\n- `false` - disable checking for the file type\n\nA file type of `*` is a wildcard that enables all file types.\n\n**Example: enable all file types**\n\n| File Type | Enabled | Comment | | --------- | ------- | ------- | | `*`       | `true`  | Enable all file types. | | `json`    | `false` | Disable checking for json files. |",
          "markdownDescription": "Enable / Disable checking file types (languageIds).\n\nThis setting replaces: `#cSpell.enabledLanguageIds#` and `#cSpell.enableFiletypes#`.\n\nA Value of:\n- `true` - enable checking for the file type\n- `false` - disable checking for the file type\n\nA file type of `*` is a wildcard that enables all file types.\n\n**Example: enable all file types**\n\n| File Type | Enabled | Comment |\n| --------- | ------- | ------- |\n| `*`       | `true`  | Enable all file types. |\n| `json`    | `false` | Disable checking for json files. |",
          "scope": "resource",
          "title": "Enabled File Types to Check",
          "type": "object"
        },
        "cSpell.enabledSchemes": {
          "additionalProperties": {
            "type": "boolean"
          },
          "default": {
            "comment": true,
            "file": true,
            "gist": true,
            "repo": true,
            "sftp": true,
            "untitled": true,
            "vscode-notebook-cell": true,
            "vscode-scm": true,
            "vscode-userdata": true,
            "vscode-vfs": true,
            "vsls": true
          },
          "description": "Control which file schemes will be checked for spelling (VS Code must be restarted for this setting to take effect).\n\n\nSome schemes have special meaning like:\n- `untitled` - Used for new documents that have not yet been saved\n- `vscode-notebook-cell` - Used for validating segments of a Notebook.\n- `vscode-userdata` - Needed to spell check `.code-snippets`\n- `vscode-scm` - Needed to spell check Source Control commit messages.\n- `comment` - Used for new comment editors.",
          "markdownDescription": "Control which file schemes will be checked for spelling (VS Code must be restarted for this setting to take effect).\n\n\nSome schemes have special meaning like:\n- `untitled` - Used for new documents that have not yet been saved\n- `vscode-notebook-cell` - Used for validating segments of a Notebook.\n- `vscode-userdata` - Needed to spell check `.code-snippets`\n- `vscode-scm` - Needed to spell check Source Control commit messages.\n- `comment` - Used for new comment editors.",
          "scope": "window",
          "title": "Specify Allowed Schemes",
          "type": "object"
        },
        "cSpell.files": {
          "description": "Glob patterns of files to be checked. Glob patterns are relative to the `#cSpell.globRoot#` of the configuration file that defines them.",
          "items": {
            "description": "These are glob expressions.",
            "markdownDescription": "These are glob expressions.",
            "type": "string"
          },
          "markdownDescription": "Glob patterns of files to be checked.\nGlob patterns are relative to the `#cSpell.globRoot#` of the configuration file that defines them.",
          "scope": "resource",
          "title": "Glob patterns of files to be checked",
          "type": "array"
        },
        "cSpell.globRoot": {
          "description": "The root to use for glob patterns found in this configuration. Default: The current workspace folder. Use `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file. Defining globRoot, does not impact imported configurations.\n\nSpecial Values:\n\n- `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\n- `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.",
          "markdownDescription": "The root to use for glob patterns found in this configuration.\nDefault: The current workspace folder.\nUse `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file.\nDefining globRoot, does not impact imported configurations.\n\nSpecial Values:\n\n- `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\n- `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.",
          "scope": "resource",
          "type": "string"
        },
        "cSpell.ignorePaths": {
          "default": [
            "package-lock.json",
            "node_modules",
            "vscode-extension",
            ".git/{info,lfs,logs,refs,objects}/**",
            ".git/{index,*refs,*HEAD}",
            ".vscode",
            ".vscode-insiders"
          ],
          "description": "Glob patterns of files to be ignored. The patterns are relative to the `#cSpell.globRoot#` of the configuration file that defines them.",
          "items": {
            "description": "Simple Glob string, the root will be globRoot.",
            "markdownDescription": "Simple Glob string, the root will be globRoot.",
            "type": "string"
          },
          "markdownDescription": "Glob patterns of files to be ignored. The patterns are relative to the `#cSpell.globRoot#` of the configuration file that defines them.",
          "scope": "resource",
          "title": "Glob patterns of files to be ignored",
          "type": "array"
        },
        "cSpell.import": {
          "description": "Allows this configuration to inherit configuration for one or more other files.\n\nSee [Importing / Extending Configuration](https://cspell.org/configuration/imports/) for more details.",
          "items": {
            "description": "A File System Path. Relative paths are relative to the configuration file.",
            "markdownDescription": "A File System Path. Relative paths are relative to the configuration file.",
            "type": "string"
          },
          "markdownDescription": "Allows this configuration to inherit configuration for one or more other files.\n\nSee [Importing / Extending Configuration](https://cspell.org/configuration/imports/) for more details.",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.mergeCSpellSettings": {
          "default": true,
          "description": "Specify if fields from `.vscode/settings.json` are passed to the spell checker. This only applies when there is a CSpell configuration file in the workspace.\n\nThe purpose of this setting to help provide a consistent result compared to the CSpell spell checker command line tool.\n\nValues:\n- `true` - all settings will be merged based upon `#cSpell.mergeCSpellSettingsFields#`.\n- `false` - only use `.vscode/settings.json` if a CSpell configuration is not found.\n\nNote: this setting is used in conjunction with `#cSpell.mergeCSpellSettingsFields#`.",
          "markdownDescription": "Specify if fields from `.vscode/settings.json` are passed to the spell checker.\nThis only applies when there is a CSpell configuration file in the workspace.\n\nThe purpose of this setting to help provide a consistent result compared to the\nCSpell spell checker command line tool.\n\nValues:\n- `true` - all settings will be merged based upon `#cSpell.mergeCSpellSettingsFields#`.\n- `false` - only use `.vscode/settings.json` if a CSpell configuration is not found.\n\nNote: this setting is used in conjunction with `#cSpell.mergeCSpellSettingsFields#`.",
          "scope": "resource",
          "since": "4.0.0",
          "type": "boolean"
        },
        "cSpell.mergeCSpellSettingsFields": {
          "additionalProperties": false,
          "default": {
            "allowCompoundWords": true,
            "caseSensitive": true,
            "dictionaries": true,
            "dictionaryDefinitions": true,
            "enableGlobDot": true,
            "features": true,
            "files": true,
            "flagWords": true,
            "gitignoreRoot": true,
            "globRoot": true,
            "ignorePaths": true,
            "ignoreRegExpList": true,
            "ignoreWords": true,
            "import": true,
            "includeRegExpList": true,
            "language": true,
            "languageId": true,
            "languageSettings": true,
            "loadDefaultConfiguration": true,
            "minWordLength": true,
            "noConfigSearch": true,
            "noSuggestDictionaries": true,
            "numSuggestions": true,
            "overrides": true,
            "patterns": true,
            "pnpFiles": true,
            "reporters": true,
            "suggestWords": true,
            "useGitignore": true,
            "usePnP": true,
            "userWords": true,
            "validateDirectives": true,
            "words": true
          },
          "description": "Specify which fields from `.vscode/settings.json` are passed to the spell checker. This only applies when there is a CSpell configuration file in the workspace and `#cSpell.mergeCSpellSettings#` is `true`.\n\nValues:\n- `{ flagWords: true, userWords: false }` - Always allow `flagWords`, but never allow `userWords`.\n\nExample: ```jsonc \"cSpell.mergeCSpellSettingsFields\": { \"userWords\": false } ```",
          "markdownDescription": "Specify which fields from `.vscode/settings.json` are passed to the spell checker.\nThis only applies when there is a CSpell configuration file in the workspace and\n`#cSpell.mergeCSpellSettings#` is `true`.\n\nValues:\n- `{ flagWords: true, userWords: false }` - Always allow `flagWords`, but never allow `userWords`.\n\nExample:\n```jsonc\n\"cSpell.mergeCSpellSettingsFields\": { \"userWords\": false }\n```",
          "properties": {
            "allowCompoundWords": {
              "type": "boolean"
            },
            "caseSensitive": {
              "type": "boolean"
            },
            "dictionaries": {
              "type": "boolean"
            },
            "dictionaryDefinitions": {
              "type": "boolean"
            },
            "enableGlobDot": {
              "type": "boolean"
            },
            "features": {
              "type": "boolean"
            },
            "files": {
              "type": "boolean"
            },
            "flagWords": {
              "type": "boolean"
            },
            "gitignoreRoot": {
              "type": "boolean"
            },
            "globRoot": {
              "type": "boolean"
            },
            "ignorePaths": {
              "type": "boolean"
            },
            "ignoreRegExpList": {
              "type": "boolean"
            },
            "ignoreWords": {
              "type": "boolean"
            },
            "import": {
              "type": "boolean"
            },
            "includeRegExpList": {
              "type": "boolean"
            },
            "language": {
              "type": "boolean"
            },
            "languageId": {
              "type": "boolean"
            },
            "languageSettings": {
              "type": "boolean"
            },
            "loadDefaultConfiguration": {
              "type": "boolean"
            },
            "minWordLength": {
              "type": "boolean"
            },
            "noConfigSearch": {
              "type": "boolean"
            },
            "noSuggestDictionaries": {
              "type": "boolean"
            },
            "numSuggestions": {
              "type": "boolean"
            },
            "overrides": {
              "type": "boolean"
            },
            "patterns": {
              "type": "boolean"
            },
            "pnpFiles": {
              "type": "boolean"
            },
            "reporters": {
              "type": "boolean"
            },
            "suggestWords": {
              "type": "boolean"
            },
            "useGitignore": {
              "type": "boolean"
            },
            "usePnP": {
              "type": "boolean"
            },
            "userWords": {
              "type": "boolean"
            },
            "validateDirectives": {
              "type": "boolean"
            },
            "words": {
              "type": "boolean"
            }
          },
          "scope": "resource",
          "since": "4.0.0",
          "type": "object"
        },
        "cSpell.noConfigSearch": {
          "description": "Prevents searching for local configuration when checking individual documents.",
          "markdownDescription": "Prevents searching for local configuration when checking individual documents.",
          "scope": "resource",
          "type": "boolean"
        },
        "cSpell.spellCheckOnlyWorkspaceFiles": {
          "default": false,
          "description": "Only spell check files that are in the currently open workspace. This same effect can be achieved using the `#cSpell.files#` setting.\n\n\n```js \"cSpell.files\": [\"/**\"] ```",
          "markdownDescription": "Only spell check files that are in the currently open workspace.\nThis same effect can be achieved using the `#cSpell.files#` setting.\n\n\n```js\n\"cSpell.files\": [\"/**\"]\n```",
          "scope": "window",
          "title": "Spell Check Only Workspace Files",
          "type": "boolean"
        },
        "cSpell.useGitignore": {
          "default": true,
          "description": "Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.",
          "markdownDescription": "Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.",
          "scope": "resource",
          "type": "boolean"
        },
        "cSpell.usePnP": {
          "description": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence of a PnP file and load it.",
          "markdownDescription": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading\npackages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence\nof a PnP file and load it.",
          "scope": "resource",
          "type": "boolean"
        },
        "cSpell.workspaceRootPath": {
          "description": "Define the path to the workspace root folder in a multi-root workspace. By default it is the first folder.\n\nThis is used to find the `cspell.json` file for the workspace.\n\n\n**Example: use the `client` folder** ``` ${workspaceFolder:client} ```",
          "markdownDescription": "Define the path to the workspace root folder in a multi-root workspace.\nBy default it is the first folder.\n\nThis is used to find the `cspell.json` file for the workspace.\n\n\n**Example: use the `client` folder**\n```\n${workspaceFolder:client}\n```",
          "scope": "resource",
          "title": "Workspace Root Folder Path",
          "type": "string"
        }
      },
      "title": "Files, Folders, and Workspaces",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Settings that control dictionaries and language preferences.",
      "order": 1,
      "properties": {
        "cSpell.caseSensitive": {
          "description": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.   Incorrect accents or partially missing accents will be marked as incorrect.   Note: Some languages like Portuguese have case sensitivity turned on by default.   You must use `#cSpell.languageSettings#` to turn it off.\n- `true` - Case and accents are enforced by default.",
          "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n  Note: Some languages like Portuguese have case sensitivity turned on by default.\n  You must use `#cSpell.languageSettings#` to turn it off.\n- `true` - Case and accents are enforced by default.",
          "scope": "resource",
          "type": "boolean"
        },
        "cSpell.customDictionaries": {
          "additionalProperties": {
            "anyOf": [
              {
                "title": "Named dictionary to be enabled / disabled\n- `true` - turn on the named dictionary\n- `false` - turn off the named dictionary",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "description": "Define a custom dictionary to be included.",
                "markdownDescription": "Define a custom dictionary to be included.",
                "properties": {
                  "addWords": {
                    "default": true,
                    "description": "Indicate if this custom dictionary should be used to store added words.",
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional: A human readable description.",
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "ignoreForbiddenWords": {
                    "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                    "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "anyOf": [
                      {
                        "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                        "title": "Path to Dictionary Text File",
                        "type": "string"
                      },
                      {
                        "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                        "type": "string"
                      }
                    ],
                    "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                    "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                    "title": "Path to Dictionary Text File"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "title": "Scope of dictionary"
                  },
                  "supportNonStrictSearches": {
                    "default": true,
                    "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                    "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                    "type": "boolean"
                  }
                },
                "title": "Custom Dictionary Entry",
                "type": "object"
              }
            ]
          },
          "description": "Define custom dictionaries to be included by default. If `addWords` is `true` words will be added to this dictionary.\n\n\n**Example:**\n\n```js \"cSpell.customDictionaries\": {   \"project-words\": {     \"name\": \"project-words\",     \"path\": \"${workspaceRoot}/project-words.txt\",     \"description\": \"Words used in this project\",     \"addWords\": true   },   \"custom\": true, // Enable the `custom` dictionary   \"internal-terms\": false // Disable the `internal-terms` dictionary } ```",
          "markdownDescription": "Define custom dictionaries to be included by default.\nIf `addWords` is `true` words will be added to this dictionary.\n\n\n**Example:**\n\n```js\n\"cSpell.customDictionaries\": {\n  \"project-words\": {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  },\n  \"custom\": true, // Enable the `custom` dictionary\n  \"internal-terms\": false // Disable the `internal-terms` dictionary\n}\n```",
          "scope": "resource",
          "title": "Custom Dictionaries",
          "type": "object"
        },
        "cSpell.dictionaries": {
          "description": "Optional list of dictionaries to use.\n\nEach entry should match the name of the dictionary.\n\nTo remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.\n\n\nExample:\n\n```jsonc // Enable `lorem-ipsum` and disable `typescript` \"cSpell.dictionaries\": [\"lorem-ipsum\", \"!typescript\"] ```",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Optional list of dictionaries to use.\n\nEach entry should match the name of the dictionary.\n\nTo remove a dictionary from the list add `!` before the name.\ni.e. `!typescript` will turn off the dictionary with the name `typescript`.\n\n\nExample:\n\n```jsonc\n// Enable `lorem-ipsum` and disable `typescript`\n\"cSpell.dictionaries\": [\"lorem-ipsum\", \"!typescript\"]\n```",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.dictionaryDefinitions": {
          "description": "Define custom dictionaries. If `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js \"cSpell.dictionaryDefinitions\": [   {     \"name\": \"project-words\",     \"path\": \"${workspaceRoot}/project-words.txt\",     \"description\": \"Words used in this project\",     \"addWords\": true   } ] ```",
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": true,
                    "description": "Indicate if this custom dictionary should be used to store added words.",
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional: A human readable description.",
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "ignoreForbiddenWords": {
                    "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                    "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                    "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                    "type": "string"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "title": "Scope of dictionary"
                  },
                  "supportNonStrictSearches": {
                    "default": true,
                    "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                    "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "path"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "description": {
                    "description": "Optional description of the contents / purpose of the dictionary.",
                    "markdownDescription": "Optional description of the contents / purpose of the dictionary.",
                    "type": "string"
                  },
                  "ignoreForbiddenWords": {
                    "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                    "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Path to the file.",
                    "markdownDescription": "Path to the file.",
                    "type": "string"
                  },
                  "supportNonStrictSearches": {
                    "default": true,
                    "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                    "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "path",
                  "name"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                    "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional description of the contents / purpose of the dictionary.",
                    "markdownDescription": "Optional description of the contents / purpose of the dictionary.",
                    "type": "string"
                  },
                  "ignoreForbiddenWords": {
                    "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                    "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Path to custom dictionary text file.",
                    "markdownDescription": "Path to custom dictionary text file.",
                    "type": "string"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`.",
                    "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                  },
                  "supportNonStrictSearches": {
                    "default": true,
                    "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                    "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "path",
                  "addWords",
                  "name"
                ],
                "type": "object"
              }
            ]
          },
          "markdownDescription": "Define custom dictionaries.\nIf `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js\n\"cSpell.dictionaryDefinitions\": [\n  {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n]\n```",
          "scope": "resource",
          "title": "Dictionary Definitions",
          "type": "array"
        },
        "cSpell.flagWords": {
          "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
          "items": {
            "type": "string"
          },
          "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.ignoreWords": {
          "description": "A list of words to be ignored by the spell checker.",
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of words to be ignored by the spell checker.",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.language": {
          "default": "en",
          "description": "Current active spelling language.\n\nExample: `en-GB` for British English\n\nExample: `en,nl` to enable both English and Dutch",
          "markdownDescription": "Current active spelling language.\n\nExample: `en-GB` for British English\n\nExample: `en,nl` to enable both English and Dutch",
          "scope": "resource",
          "type": "string"
        },
        "cSpell.languageSettings": {
          "description": "Additional settings for individual programming languages and locales.",
          "items": {
            "additionalProperties": false,
            "properties": {
              "allowCompoundWords": {
                "default": false,
                "description": "True to enable compound word checking.",
                "markdownDescription": "True to enable compound word checking.",
                "type": "boolean"
              },
              "caseSensitive": {
                "default": false,
                "description": "Determines if words must match case and accent rules.\n\nSee [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.\n\n- `false` - Case is ignored and accents can be missing on the entire word.   Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                "markdownDescription": "Determines if words must match case and accent rules.\n\nSee [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                "type": "boolean"
              },
              "description": {
                "description": "Optional description of configuration.",
                "markdownDescription": "Optional description of configuration.",
                "type": "string"
              },
              "dictionaries": {
                "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/) and [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                "items": {
                  "anyOf": [
                    {
                      "description": "This a reference to a named dictionary. It is expected to match the name of a dictionary.",
                      "markdownDescription": "This a reference to a named dictionary.\nIt is expected to match the name of a dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    {
                      "description": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.    Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.    Overrides `!!<dictionary_name>`.",
                      "markdownDescription": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.\n   Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.\n   Overrides `!!<dictionary_name>`.",
                      "pattern": "^(?=!+[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    }
                  ],
                  "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                  "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }"
                },
                "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                "type": "array"
              },
              "dictionaryDefinitions": {
                "description": "Define custom dictionaries. If `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js \"cSpell.dictionaryDefinitions\": [   {     \"name\": \"project-words\",     \"path\": \"${workspaceRoot}/project-words.txt\",     \"description\": \"Words used in this project\",     \"addWords\": true   } ] ```",
                "items": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "addWords": {
                          "default": true,
                          "description": "Indicate if this custom dictionary should be used to store added words.",
                          "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                          "title": "Add Words to Dictionary",
                          "type": "boolean"
                        },
                        "description": {
                          "description": "Optional: A human readable description.",
                          "markdownDescription": "Optional: A human readable description.",
                          "title": "Description of the Dictionary",
                          "type": "string"
                        },
                        "ignoreForbiddenWords": {
                          "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                          "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                          "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "title": "Name of Dictionary",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                          "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                          "type": "string"
                        },
                        "scope": {
                          "anyOf": [
                            {
                              "description": "Specifies the scope of a dictionary.",
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            {
                              "items": {
                                "description": "Specifies the scope of a dictionary.",
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "markdownDescription": "Specifies the scope of a dictionary.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                          "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                          "title": "Scope of dictionary"
                        },
                        "supportNonStrictSearches": {
                          "default": true,
                          "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                          "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "description": {
                          "description": "Optional description of the contents / purpose of the dictionary.",
                          "markdownDescription": "Optional description of the contents / purpose of the dictionary.",
                          "type": "string"
                        },
                        "ignoreForbiddenWords": {
                          "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                          "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to the file.",
                          "markdownDescription": "Path to the file.",
                          "type": "string"
                        },
                        "supportNonStrictSearches": {
                          "default": true,
                          "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                          "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "path",
                        "name"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "addWords": {
                          "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                          "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                          "type": "boolean"
                        },
                        "description": {
                          "description": "Optional description of the contents / purpose of the dictionary.",
                          "markdownDescription": "Optional description of the contents / purpose of the dictionary.",
                          "type": "string"
                        },
                        "ignoreForbiddenWords": {
                          "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                          "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to custom dictionary text file.",
                          "markdownDescription": "Path to custom dictionary text file.",
                          "type": "string"
                        },
                        "scope": {
                          "anyOf": [
                            {
                              "description": "Specifies the scope of a dictionary.",
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            {
                              "items": {
                                "description": "Specifies the scope of a dictionary.",
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "markdownDescription": "Specifies the scope of a dictionary.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`.",
                          "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                        },
                        "supportNonStrictSearches": {
                          "default": true,
                          "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                          "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "path",
                        "addWords",
                        "name"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "markdownDescription": "Define custom dictionaries.\nIf `addWords` is `true` words will be added to this dictionary.\n\nThis setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).\n\nIt is better to use `#cSpell.customDictionaries#`\n\n**Example:**\n\n```js\n\"cSpell.dictionaryDefinitions\": [\n  {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  }\n]\n```",
                "scope": "resource",
                "title": "Dictionary Definitions",
                "type": "array"
              },
              "enabled": {
                "default": true,
                "description": "Is the spell checker enabled.",
                "markdownDescription": "Is the spell checker enabled.",
                "type": "boolean"
              },
              "flagWords": {
                "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                "type": "array"
              },
              "id": {
                "description": "Optional identifier.",
                "markdownDescription": "Optional identifier.",
                "type": "string"
              },
              "ignoreRegExpList": {
                "description": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON ```json \"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"] ```\n\nYAML ```yaml ignoreRegExpList:   - >-    /\\b[A-Z]+\\b/g ```\n\nBy default, several patterns are excluded. See [Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "description": "This matches the name in a pattern definition.",
                      "markdownDescription": "This matches the name in a pattern definition.",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Base64",
                        "Base64MultiLine",
                        "Base64SingleLine",
                        "CStyleComment",
                        "CStyleHexValue",
                        "CSSHexValue",
                        "CommitHash",
                        "CommitHashLink",
                        "Email",
                        "EscapeCharacters",
                        "HexValues",
                        "href",
                        "PhpHereDoc",
                        "PublicKey",
                        "RsaCert",
                        "SshRsa",
                        "SHA",
                        "HashStrings",
                        "SpellCheckerDisable",
                        "SpellCheckerDisableBlock",
                        "SpellCheckerDisableLine",
                        "SpellCheckerDisableNext",
                        "SpellCheckerIgnoreInDocSetting",
                        "string",
                        "UnicodeRef",
                        "Urls",
                        "UUID",
                        "Everything"
                      ],
                      "type": "string"
                    }
                  ],
                  "description": "A PatternRef is a Pattern or PatternId.",
                  "markdownDescription": "A PatternRef is a Pattern or PatternId."
                },
                "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "type": "array"
              },
              "ignoreWords": {
                "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                "type": "array"
              },
              "includeRegExpList": {
                "description": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "description": "This matches the name in a pattern definition.",
                      "markdownDescription": "This matches the name in a pattern definition.",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Base64",
                        "Base64MultiLine",
                        "Base64SingleLine",
                        "CStyleComment",
                        "CStyleHexValue",
                        "CSSHexValue",
                        "CommitHash",
                        "CommitHashLink",
                        "Email",
                        "EscapeCharacters",
                        "HexValues",
                        "href",
                        "PhpHereDoc",
                        "PublicKey",
                        "RsaCert",
                        "SshRsa",
                        "SHA",
                        "HashStrings",
                        "SpellCheckerDisable",
                        "SpellCheckerDisableBlock",
                        "SpellCheckerDisableLine",
                        "SpellCheckerDisableNext",
                        "SpellCheckerIgnoreInDocSetting",
                        "string",
                        "UnicodeRef",
                        "Urls",
                        "UUID",
                        "Everything"
                      ],
                      "type": "string"
                    }
                  ],
                  "description": "A PatternRef is a Pattern or PatternId.",
                  "markdownDescription": "A PatternRef is a Pattern or PatternId."
                },
                "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "type": "array"
              },
              "languageId": {
                "anyOf": [
                  {
                    "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                    "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                    "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                    "type": "string"
                  },
                  {
                    "description": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                    "markdownDescription": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                    "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                    "type": "string"
                  },
                  {
                    "description": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                    "markdownDescription": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                    "pattern": "^(![-\\w_\\s]+)(,!?[-\\w_\\s]+)*$",
                    "type": "string"
                  },
                  {
                    "items": {
                      "anyOf": [
                        {
                          "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                          "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
                          "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                          "type": "string"
                        },
                        {
                          "description": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                          "markdownDescription": "A single string with a comma separated list of file types:\n- `typescript,cpp`\n- `json,jsonc,yaml`\n- etc.",
                          "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                          "type": "string"
                        },
                        {
                          "description": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                          "markdownDescription": "A Negative File Type used to exclude files of that type.\n- `!typescript` - will exclude typescript files.\n- `!cpp,!json` - will exclude cpp and json files.\n- `!typescript,javascript` - will exclude typescript files and include javascript files.",
                          "pattern": "^(![-\\w_\\s]+)(,!?[-\\w_\\s]+)*$",
                          "type": "string"
                        }
                      ]
                    },
                    "type": "array"
                  }
                ],
                "description": "The language id.  Ex: `typescript`, `html`, or `php`.  `*` -- will match all languages.",
                "markdownDescription": "The language id.  Ex: `typescript`, `html`, or `php`.  `*` -- will match all languages."
              },
              "locale": {
                "anyOf": [
                  {
                    "description": "This is a written language locale like: `en`, `en-GB`, `fr`, `es`, `de` or `en,fr` for both English and French",
                    "markdownDescription": "This is a written language locale like: `en`, `en-GB`, `fr`, `es`, `de` or `en,fr` for both English and French",
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "This is a written language locale like: `en`, `en-GB`, `fr`, `es`, `de` or `en,fr` for both English and French",
                      "markdownDescription": "This is a written language locale like: `en`, `en-GB`, `fr`, `es`, `de` or `en,fr` for both English and French",
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "description": "The locale filter, matches against the language. This can be a comma separated list. `*` will match all locales.",
                "markdownDescription": "The locale filter, matches against the language. This can be a comma separated list. `*` will match all locales."
              },
              "name": {
                "description": "Optional name of configuration.",
                "markdownDescription": "Optional name of configuration.",
                "type": "string"
              },
              "noSuggestDictionaries": {
                "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
                "items": {
                  "anyOf": [
                    {
                      "description": "This a reference to a named dictionary. It is expected to match the name of a dictionary.",
                      "markdownDescription": "This a reference to a named dictionary.\nIt is expected to match the name of a dictionary.",
                      "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    },
                    {
                      "description": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.    Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.    Overrides `!!<dictionary_name>`.",
                      "markdownDescription": "This a negative reference to a named dictionary.\n\nIt is used to exclude or include a dictionary by name.\n\nThe reference starts with 1 or more `!`.\n- `!<dictionary_name>` - Used to exclude the dictionary matching `<dictionary_name>`.\n- `!!<dictionary_name>` - Used to re-include a dictionary matching `<dictionary_name>`.\n   Overrides `!<dictionary_name>`.\n- `!!!<dictionary_name>` - Used to exclude a dictionary matching `<dictionary_name>`.\n   Overrides `!!<dictionary_name>`.",
                      "pattern": "^(?=!+[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                      "type": "string"
                    }
                  ],
                  "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                  "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }"
                },
                "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                "type": "array"
              },
              "patterns": {
                "description": "Defines a list of patterns that can be used with the  {@link  ignoreRegExpList }  and  {@link  includeRegExpList }  options.\n\nFor example:\n\n```javascript \"ignoreRegExpList\": [\"comments\"], \"patterns\": [   {     \"name\": \"comment-single-line\",     \"pattern\": \"/#.*/g\"   },   {     \"name\": \"comment-multi-line\",     \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"   },   // You can also combine multiple named patterns into one single named pattern   {     \"name\": \"comments\",     \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]   } ] ```",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "description": "Description of the pattern.",
                      "markdownDescription": "Description of the pattern.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                      "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                      "type": "string"
                    },
                    "pattern": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "RegExp pattern or array of RegExp patterns.",
                      "markdownDescription": "RegExp pattern or array of RegExp patterns."
                    }
                  },
                  "required": [
                    "name",
                    "pattern"
                  ],
                  "type": "object"
                },
                "markdownDescription": "Defines a list of patterns that can be used with the  {@link  ignoreRegExpList }  and\n {@link  includeRegExpList }  options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```",
                "type": "array"
              },
              "suggestWords": {
                "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                "type": "array"
              },
              "words": {
                "description": "List of words to be considered correct.",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "List of words to be considered correct.",
                "type": "array"
              }
            },
            "required": [
              "languageId"
            ],
            "type": "object"
          },
          "markdownDescription": "Additional settings for individual programming languages and locales.",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.noSuggestDictionaries": {
          "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.suggestWords": {
          "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
          "type": "array"
        },
        "cSpell.useLocallyInstalledCSpellDictionaries": {
          "default": true,
          "description": "Search for `@cspell/cspell-bundled-dicts` in the workspace folder and use it if found.",
          "markdownDescription": "Search for `@cspell/cspell-bundled-dicts` in the workspace folder and use it if found.",
          "scope": "resource",
          "since": "4.0.0",
          "type": "boolean"
        },
        "cSpell.userWords": {
          "description": "Words to add to global dictionary -- should only be in the user config file.",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Words to add to global dictionary -- should only be in the user config file.",
          "scope": "resource",
          "type": "array"
        },
        "cSpell.words": {
          "description": "List of words to be considered correct.",
          "items": {
            "type": "string"
          },
          "markdownDescription": "List of words to be considered correct.",
          "scope": "resource",
          "type": "array"
        }
      },
      "title": "Languages and Dictionaries",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Settings that control the appearance of the spell checker.",
      "order": 6,
      "properties": {
        "cSpell.dark": {
          "additionalProperties": false,
          "description": "Decoration for dark themes.\n\nSee:\n- `#cSpell.overviewRulerColor#`\n- `#cSpell.textDecoration#`",
          "markdownDescription": "Decoration for dark themes.\n\nSee:\n- `#cSpell.overviewRulerColor#`\n- `#cSpell.textDecoration#`",
          "properties": {
            "overviewRulerColor": {
              "default": "#348feb80",
              "description": "The CSS color used to show issues in the ruler.\n\nDepends upon `#cSpell.useCustomDecorations#`.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
              "markdownDescription": "The CSS color used to show issues in the ruler.\n\nDepends upon `#cSpell.useCustomDecorations#`.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecoration": {
              "description": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.useCustomDecorations#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.",
              "markdownDescription": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.useCustomDecorations#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationColor": {
              "default": "#348feb",
              "description": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "markdownDescription": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationColorFlagged": {
              "default": "#f44",
              "description": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "markdownDescription": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationColorSuggestion": {
              "default": "#8884",
              "description": "The decoration color for spelling suggestions.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nCommon Format: `#RGBA` or `#RRGGBBAA` or `#RGB` or `#RRGGBB`\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "markdownDescription": "The decoration color for spelling suggestions.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nCommon Format: `#RGBA` or `#RRGGBBAA` or `#RGB` or `#RRGGBB`\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "scope": "application",
              "since": "4.0.2",
              "type": "string"
            },
            "textDecorationLine": {
              "default": "underline",
              "description": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
              "enum": [
                "underline",
                "overline",
                "line-through"
              ],
              "markdownDescription": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationStyle": {
              "default": "dashed",
              "description": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
              "enum": [
                "solid",
                "wavy",
                "dotted",
                "dashed",
                "double"
              ],
              "markdownDescription": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationThickness": {
              "default": "auto",
              "description": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
              "markdownDescription": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            }
          },
          "scope": "application",
          "since": "4.0.0",
          "type": "object"
        },
        "cSpell.doNotUseCustomDecorationForScheme": {
          "additionalProperties": {
            "type": "boolean"
          },
          "default": {
            "vscode-scm": true
          },
          "description": "Use the VS Code Diagnostic Collection to render spelling issues.\n\nWith some edit boxes, like the source control message box, the custom decorations do not show up. This setting allows the use of the VS Code Diagnostic Collection to render spelling issues.",
          "markdownDescription": "Use the VS Code Diagnostic Collection to render spelling issues.\n\nWith some edit boxes, like the source control message box, the custom decorations do not show up.\nThis setting allows the use of the VS Code Diagnostic Collection to render spelling issues.",
          "scope": "application",
          "since": "4.0.0",
          "title": "Use VS Code to Render Spelling Issues",
          "type": "object"
        },
        "cSpell.light": {
          "additionalProperties": false,
          "description": "Decoration for light themes.\n\nSee:\n- `#cSpell.overviewRulerColor#`\n- `#cSpell.textDecoration#`",
          "markdownDescription": "Decoration for light themes.\n\nSee:\n- `#cSpell.overviewRulerColor#`\n- `#cSpell.textDecoration#`",
          "properties": {
            "overviewRulerColor": {
              "default": "#348feb80",
              "description": "The CSS color used to show issues in the ruler.\n\nDepends upon `#cSpell.useCustomDecorations#`.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
              "markdownDescription": "The CSS color used to show issues in the ruler.\n\nDepends upon `#cSpell.useCustomDecorations#`.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecoration": {
              "description": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.useCustomDecorations#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.",
              "markdownDescription": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.useCustomDecorations#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationColor": {
              "default": "#348feb",
              "description": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "markdownDescription": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationColorFlagged": {
              "default": "#f44",
              "description": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "markdownDescription": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationColorSuggestion": {
              "default": "#8884",
              "description": "The decoration color for spelling suggestions.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nCommon Format: `#RGBA` or `#RRGGBBAA` or `#RGB` or `#RRGGBB`\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "markdownDescription": "The decoration color for spelling suggestions.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nCommon Format: `#RGBA` or `#RRGGBBAA` or `#RGB` or `#RRGGBB`\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
              "scope": "application",
              "since": "4.0.2",
              "type": "string"
            },
            "textDecorationLine": {
              "default": "underline",
              "description": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
              "enum": [
                "underline",
                "overline",
                "line-through"
              ],
              "markdownDescription": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationStyle": {
              "default": "dashed",
              "description": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
              "enum": [
                "solid",
                "wavy",
                "dotted",
                "dashed",
                "double"
              ],
              "markdownDescription": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            },
            "textDecorationThickness": {
              "default": "auto",
              "description": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
              "markdownDescription": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
              "scope": "application",
              "since": "4.0.0",
              "type": "string"
            }
          },
          "scope": "application",
          "since": "4.0.0",
          "type": "object"
        },
        "cSpell.overviewRulerColor": {
          "default": "#348feb80",
          "description": "The CSS color used to show issues in the ruler.\n\nDepends upon `#cSpell.useCustomDecorations#`.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
          "markdownDescription": "The CSS color used to show issues in the ruler.\n\nDepends upon `#cSpell.useCustomDecorations#`.\n\nSee:\n- [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n- [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)\n- Hex colors\n- Use \"\" (empty string) to disable.\n\nExamples:\n- `green`\n- `DarkYellow`\n- `#ffff0080` - semi-transparent yellow.\n- `rgb(255 153 0 / 80%)`",
          "scope": "application",
          "since": "4.0.0",
          "type": "string"
        },
        "cSpell.showInRuler": {
          "default": true,
          "description": "Show spelling issues in the editor ruler.\n\nNote: This setting is only used when `#cSpell.useCustomDecorations#` is `true`.",
          "markdownDescription": "Show spelling issues in the editor ruler.\n\nNote: This setting is only used when `#cSpell.useCustomDecorations#` is `true`.",
          "scope": "application",
          "since": "4.0.35",
          "type": "boolean"
        },
        "cSpell.textDecoration": {
          "description": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.useCustomDecorations#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.",
          "markdownDescription": "The CSS Style used to decorate spelling issues. Depends upon `#cSpell.useCustomDecorations#`.\n\nThis setting is used to manually configure the text decoration. If it is not set, the following settings are used:\n- `#cSpell.textDecorationLine#` to pick the line type\n- `#cSpell.textDecorationStyle#` to pick the style\n- `#cSpell.textDecorationColor#` to set the color\n- `#cSpell.textDecorationThickness#` to set the thickness.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\nFormat:  `<line> [style] <color> [thickness]`\n\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `underline green`\n- `underline dotted yellow 0.2rem`\n- `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.",
          "scope": "application",
          "since": "4.0.0",
          "type": "string"
        },
        "cSpell.textDecorationColor": {
          "default": "#348feb",
          "description": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
          "markdownDescription": "The decoration color for normal spelling issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nTo change the ruler color, use `#cSpell.overviewRulerColor#`.\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
          "scope": "application",
          "since": "4.0.0",
          "type": "string"
        },
        "cSpell.textDecorationColorFlagged": {
          "default": "#f44",
          "description": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
          "markdownDescription": "The decoration color for flagged issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
          "scope": "application",
          "since": "4.0.0",
          "type": "string"
        },
        "cSpell.textDecorationColorSuggestion": {
          "default": "#8884",
          "description": "The decoration color for spelling suggestions.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nCommon Format: `#RGBA` or `#RRGGBBAA` or `#RGB` or `#RRGGBB`\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
          "markdownDescription": "The decoration color for spelling suggestions.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)\n\nCommon Format: `#RGBA` or `#RRGGBBAA` or `#RGB` or `#RRGGBB`\n\nExamples:\n- `green`\n- `yellow`\n- `#ff0c`",
          "scope": "application",
          "since": "4.0.2",
          "type": "string"
        },
        "cSpell.textDecorationLine": {
          "default": "underline",
          "description": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
          "enum": [
            "underline",
            "overline",
            "line-through"
          ],
          "markdownDescription": "The CSS line type used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)",
          "scope": "application",
          "since": "4.0.0",
          "type": "string"
        },
        "cSpell.textDecorationStyle": {
          "default": "dashed",
          "description": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
          "enum": [
            "solid",
            "wavy",
            "dotted",
            "dashed",
            "double"
          ],
          "markdownDescription": "The CSS line style used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)",
          "scope": "application",
          "since": "4.0.0",
          "type": "string"
        },
        "cSpell.textDecorationThickness": {
          "default": "auto",
          "description": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
          "markdownDescription": "The CSS line thickness used to decorate issues.\n\nSee: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n- thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)\n\nExamples:\n- `auto`\n- `from-font`\n- `0.2rem`\n- `1.5px`\n- `10%`",
          "scope": "application",
          "since": "4.0.0",
          "type": "string"
        },
        "cSpell.useCustomDecorations": {
          "default": false,
          "description": "Draw custom decorations on Spelling Issues.\n- `true` - Use custom decorations. - VS Code Diagnostic Severity Levels are not used.\n- `false` - Use the VS Code Diagnostic Collection to render spelling issues.\n\nNote: This setting overrides the VS Code Diagnostics setting: `#cSpell.diagnosticLevel#`.",
          "markdownDescription": "Draw custom decorations on Spelling Issues.\n- `true` - Use custom decorations. - VS Code Diagnostic Severity Levels are not used.\n- `false` - Use the VS Code Diagnostic Collection to render spelling issues.\n\nNote: This setting overrides the VS Code Diagnostics setting: `#cSpell.diagnosticLevel#`.",
          "scope": "application",
          "since": "4.0.0",
          "type": "boolean"
        }
      },
      "title": "Appearance",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Legacy settings that have been deprecated or are not commonly used.",
      "order": 20,
      "properties": {
        "cSpell.allowCompoundWords": {
          "default": false,
          "description": "Enable / Disable allowing word compounds.\n- `true` means `arraylength` would be ok\n- `false` means it would not pass.\n\nNote: this can also cause many misspelled words to seem correct.",
          "markdownDescription": "Enable / Disable allowing word compounds.\n- `true` means `arraylength` would be ok\n- `false` means it would not pass.\n\nNote: this can also cause many misspelled words to seem correct.",
          "scope": "resource",
          "type": "boolean"
        },
        "cSpell.customFolderDictionaries": {
          "deprecated": true,
          "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
          "description": "Define custom dictionaries to be included by default for the folder. If `addWords` is `true` words will be added to this dictionary.",
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": true,
                    "description": "Indicate if this custom dictionary should be used to store added words.",
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional: A human readable description.",
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "name": {
                    "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                    "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                    "title": "Path to Dictionary Text File",
                    "type": "string"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "title": "Scope of dictionary"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": true,
                    "description": "Indicate if this custom dictionary should be used to store added words.",
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional: A human readable description.",
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "ignoreForbiddenWords": {
                    "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                    "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                    "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                    "type": "string"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "title": "Scope of dictionary"
                  },
                  "supportNonStrictSearches": {
                    "default": true,
                    "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                    "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "path"
                ],
                "type": "object"
              },
              {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "type": "string"
              }
            ]
          },
          "markdownDescription": "Define custom dictionaries to be included by default for the folder.\nIf `addWords` is `true` words will be added to this dictionary.",
          "scope": "resource",
          "title": "Custom Folder Dictionaries",
          "type": "array"
        },
        "cSpell.customUserDictionaries": {
          "deprecated": true,
          "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
          "description": "Define custom dictionaries to be included by default for the user. If `addWords` is `true` words will be added to this dictionary.",
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": true,
                    "description": "Indicate if this custom dictionary should be used to store added words.",
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional: A human readable description.",
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "name": {
                    "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                    "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                    "title": "Path to Dictionary Text File",
                    "type": "string"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "title": "Scope of dictionary"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": true,
                    "description": "Indicate if this custom dictionary should be used to store added words.",
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional: A human readable description.",
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "ignoreForbiddenWords": {
                    "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                    "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                    "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                    "type": "string"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "title": "Scope of dictionary"
                  },
                  "supportNonStrictSearches": {
                    "default": true,
                    "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                    "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "path"
                ],
                "type": "object"
              },
              {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "type": "string"
              }
            ]
          },
          "markdownDescription": "Define custom dictionaries to be included by default for the user.\nIf `addWords` is `true` words will be added to this dictionary.",
          "scope": "application",
          "title": "Custom User Dictionaries",
          "type": "array"
        },
        "cSpell.customWorkspaceDictionaries": {
          "deprecated": true,
          "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
          "description": "Define custom dictionaries to be included by default for the workspace. If `addWords` is `true` words will be added to this dictionary.",
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": true,
                    "description": "Indicate if this custom dictionary should be used to store added words.",
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional: A human readable description.",
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "name": {
                    "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                    "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                    "title": "Path to Dictionary Text File",
                    "type": "string"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "title": "Scope of dictionary"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "addWords": {
                    "default": true,
                    "description": "Indicate if this custom dictionary should be used to store added words.",
                    "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                    "title": "Add Words to Dictionary",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional: A human readable description.",
                    "markdownDescription": "Optional: A human readable description.",
                    "title": "Description of the Dictionary",
                    "type": "string"
                  },
                  "ignoreForbiddenWords": {
                    "description": "Some dictionaries may contain forbidden words to prevent compounding from generating words that are not valid in the language. These are often words that are used in other languages or might be generated through compounding. This setting allows flagged words to be ignored when checking the dictionary. The effect is similar to the word not being in the dictionary.",
                    "markdownDescription": "Some dictionaries may contain forbidden words to prevent compounding from generating\nwords that are not valid in the language. These are often\nwords that are used in other languages or might be generated through compounding.\nThis setting allows flagged words to be ignored when checking the dictionary.\nThe effect is similar to the word not being in the dictionary.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary. If you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf the name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "title": "Name of Dictionary",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found in the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json \"path\": \"~/dictionaries/custom_dictionary.txt\" ```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json \"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative workspace for the currently open file.\n\n```json \"path\": \"${workspaceFolder}/build/custom_dictionary.txt\" ```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in a multi-root workspace\n\n```json \"path\": \"./build/custom_dictionary.txt\" ```",
                    "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```json\n\"path\": \"~/dictionaries/custom_dictionary.txt\"\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```json\n\"path\": \"${workspaceFolder:client}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might not work as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```json\n\"path\": \"${workspaceFolder}/build/custom_dictionary.txt\"\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```json\n\"path\": \"./build/custom_dictionary.txt\"\n```",
                    "type": "string"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "markdownDescription": "Specifies the scope of a dictionary.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "markdownDescription": "Specifies the scope of a dictionary.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                    "title": "Scope of dictionary"
                  },
                  "supportNonStrictSearches": {
                    "default": true,
                    "description": "Strip case and accents to allow for case insensitive searches and words without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie dictionaries.",
                    "markdownDescription": "Strip case and accents to allow for case insensitive searches and\nwords without accents.\n\nNote: this setting only applies to word lists. It has no-impact on trie\ndictionaries.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "path"
                ],
                "type": "object"
              },
              {
                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                "type": "string"
              }
            ]
          },
          "markdownDescription": "Define custom dictionaries to be included by default for the workspace.\nIf `addWords` is `true` words will be added to this dictionary.",
          "scope": "resource",
          "title": "Custom Workspace Dictionaries",
          "type": "array"
        },
        "cSpell.enabledLanguageIds": {
          "deprecated": true,
          "deprecationMessage": "- Use `#cSpell.enabledFileTypes#` instead.",
          "description": "Specify a list of file types to spell check. It is better to use `#cSpell.enabledFileTypes#` to Enable / Disable checking files types.",
          "items": {
            "description": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
            "markdownDescription": "A file type:\n- `*` - will match ALL file types.\n- `typescript`, `cpp`, `json`, etc.",
            "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
            "type": "string"
          },
          "markdownDescription": "Specify a list of file types to spell check. It is better to use `#cSpell.enabledFileTypes#` to Enable / Disable checking files types.",
          "scope": "resource",
          "title": "Enabled Language Ids",
          "type": "array",
          "uniqueItems": true
        },
        "cSpell.showStatus": {
          "default": true,
          "deprecationMessage": "No longer used.",
          "description": "Display the spell checker status on the status bar.",
          "markdownDescription": "Display the spell checker status on the status bar.",
          "scope": "application",
          "type": "boolean"
        },
        "cSpell.showStatusAlignment": {
          "default": "Right",
          "deprecated": true,
          "deprecationMessage": "No longer supported.",
          "description": "The side of the status bar to display the spell checker status.",
          "enum": [
            "Left",
            "Right"
          ],
          "enumDescriptions": [
            "Left Side of Statusbar",
            "Right Side of Statusbar"
          ],
          "markdownDescription": "The side of the status bar to display the spell checker status.",
          "scope": "application",
          "type": "string"
        }
      },
      "title": "Legacy",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Settings that control the performance of the spell checker.",
      "order": 4,
      "properties": {
        "cSpell.blockCheckingWhenAverageChunkSizeGreaterThan": {
          "default": 200,
          "description": "The maximum average length of chunks of text without word breaks.\n\n\nA chunk is the characters between absolute word breaks. Absolute word breaks match: `/[\\s,{}[\\]]/`\n\n\n**Error Message:** _Average word length is too long._\n\n\nIf you are seeing this message, it means that the file contains mostly long lines without many word breaks.\n\n\nHide this message using `#cSpell.enabledNotifications#`",
          "markdownDescription": "The maximum average length of chunks of text without word breaks.\n\n\nA chunk is the characters between absolute word breaks.\nAbsolute word breaks match: `/[\\s,{}[\\]]/`\n\n\n**Error Message:** _Average word length is too long._\n\n\nIf you are seeing this message, it means that the file contains mostly long lines\nwithout many word breaks.\n\n\nHide this message using `#cSpell.enabledNotifications#`",
          "scope": "language-overridable",
          "type": "number"
        },
        "cSpell.blockCheckingWhenLineLengthGreaterThan": {
          "default": 20000,
          "description": "The maximum line length.\n\n\nBlock spell checking if lines are longer than the value given. This is used to prevent spell checking generated files.\n\n\n**Error Message:** _Lines are too long._\n\n\nHide this message using `#cSpell.enabledNotifications#`",
          "markdownDescription": "The maximum line length.\n\n\nBlock spell checking if lines are longer than the value given.\nThis is used to prevent spell checking generated files.\n\n\n**Error Message:** _Lines are too long._\n\n\nHide this message using `#cSpell.enabledNotifications#`",
          "scope": "language-overridable",
          "type": "number"
        },
        "cSpell.blockCheckingWhenTextChunkSizeGreaterThan": {
          "default": 1000,
          "description": "The maximum length of a chunk of text without word breaks.\n\n\nIt is used to prevent spell checking of generated files.\n\n\nA chunk is the characters between absolute word breaks. Absolute word breaks match: `/[\\s,{}[\\]]/`, i.e. spaces or braces.\n\n\n**Error Message:** _Maximum word length exceeded._\n\n\nIf you are seeing this message, it means that the file contains a very long line without many word breaks.\n\n\nHide this message using `#cSpell.enabledNotifications#`",
          "markdownDescription": "The maximum length of a chunk of text without word breaks.\n\n\nIt is used to prevent spell checking of generated files.\n\n\nA chunk is the characters between absolute word breaks.\nAbsolute word breaks match: `/[\\s,{}[\\]]/`, i.e. spaces or braces.\n\n\n**Error Message:** _Maximum word length exceeded._\n\n\nIf you are seeing this message, it means that the file contains a very long line\nwithout many word breaks.\n\n\nHide this message using `#cSpell.enabledNotifications#`",
          "scope": "language-overridable",
          "type": "number"
        },
        "cSpell.checkLimit": {
          "default": 500,
          "description": "Set the maximum number of blocks of text to check. Each block is 1024 characters.",
          "markdownDescription": "Set the maximum number of blocks of text to check.\nEach block is 1024 characters.",
          "scope": "resource",
          "type": "number"
        },
        "cSpell.spellCheckDelayMs": {
          "default": 50,
          "description": "Delay in ms after a document has changed before checking it for spelling errors.",
          "markdownDescription": "Delay in ms after a document has changed before checking it for spelling errors.",
          "scope": "application",
          "type": "number"
        },
        "cSpell.suggestionsTimeout": {
          "default": 400,
          "description": "The maximum amount of time in milliseconds to generate suggestions for a word.",
          "markdownDescription": "The maximum amount of time in milliseconds to generate suggestions for a word.",
          "scope": "resource",
          "type": "number"
        }
      },
      "title": "Performance",
      "type": "object"
    },
    {
      "additionalProperties": false,
      "description": "Settings that control how the spell checker reports and displays errors.",
      "order": 2,
      "properties": {
        "cSpell.autoFormatConfigFile": {
          "default": false,
          "description": "If a `cspell` configuration file is updated, format the configuration file using the VS Code Format Document Provider. This will cause the configuration file to be saved prior to being updated.",
          "markdownDescription": "If a `cspell` configuration file is updated, format the configuration file\nusing the VS Code Format Document Provider. This will cause the configuration\nfile to be saved prior to being updated.",
          "scope": "window",
          "title": "Auto Format Configuration File",
          "type": "boolean"
        },
        "cSpell.diagnosticLevel": {
          "default": "Information",
          "description": "The Diagnostic Severity Level determines how issues are shown in the Problems Pane and within the document. Set the level to `Hint` to hide the issues from the Problems Pane.\n\nNote: `#cSpell.useCustomDecorations#` must be `false` to use VS Code Diagnostic Severity Levels.\n\nSee: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)",
          "enum": [
            "Error",
            "Warning",
            "Information",
            "Hint"
          ],
          "enumDescriptions": [
            "Report Spelling Issues as Errors",
            "Report Spelling Issues as Warnings",
            "Report Spelling Issues as Information",
            "Report Spelling Issues as Hints, will not show up in Problems"
          ],
          "markdownDescription": "The Diagnostic Severity Level determines how issues are shown in the Problems Pane and within the document.\nSet the level to `Hint` to hide the issues from the Problems Pane.\n\nNote: `#cSpell.useCustomDecorations#` must be `false` to use VS Code Diagnostic Severity Levels.\n\nSee: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)",
          "scope": "resource",
          "title": "Set Diagnostic Reporting Level",
          "type": "string"
        },
        "cSpell.diagnosticLevelFlaggedWords": {
          "description": "Flagged word issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle. By default, flagged words will use the same diagnostic level as general issues. Use this setting to customize them.\n\nSee: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)",
          "enum": [
            "Error",
            "Warning",
            "Information",
            "Hint"
          ],
          "enumDescriptions": [
            "Report Spelling Issues as Errors",
            "Report Spelling Issues as Warnings",
            "Report Spelling Issues as Information",
            "Report Spelling Issues as Hints, will not show up in Problems"
          ],
          "markdownDescription": "Flagged word issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle.\nBy default, flagged words will use the same diagnostic level as general issues. Use this setting to customize them.\n\nSee: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)",
          "scope": "resource",
          "since": "4.0.0",
          "title": "Set Diagnostic Reporting Level for Flagged Words",
          "type": "string"
        },
        "cSpell.enabledNotifications": {
          "additionalProperties": false,
          "default": {
            "Average Word Length too Long": true,
            "Lines too Long": true,
            "Maximum Word Length Exceeded": true
          },
          "description": "Control which notifications are displayed.\n\nSee:\n- `#cSpell.blockCheckingWhenLineLengthGreaterThan#`\n- `#cSpell.blockCheckingWhenTextChunkSizeGreaterThan#`\n- `#cSpell.blockCheckingWhenAverageChunkSizeGreaterThan#`",
          "markdownDescription": "Control which notifications are displayed.\n\nSee:\n- `#cSpell.blockCheckingWhenLineLengthGreaterThan#`\n- `#cSpell.blockCheckingWhenTextChunkSizeGreaterThan#`\n- `#cSpell.blockCheckingWhenAverageChunkSizeGreaterThan#`",
          "properties": {
            "Average Word Length too Long": {
              "description": "Enable notifications if the average word size is too high.",
              "markdownDescription": "Enable notifications if the average word size is too high.",
              "type": "boolean"
            },
            "Lines too Long": {
              "description": "Enable notifications if the line is too long.",
              "markdownDescription": "Enable notifications if the line is too long.",
              "type": "boolean"
            },
            "Maximum Word Length Exceeded": {
              "description": "Enable notifications if the maximum word length is exceeded.",
              "markdownDescription": "Enable notifications if the maximum word length is exceeded.",
              "type": "boolean"
            }
          },
          "scope": "resource",
          "since": "4.0.41",
          "title": "Enabled Notifications",
          "type": "object"
        },
        "cSpell.hideAddToDictionaryCodeActions": {
          "default": false,
          "description": "Hide the options to add words to dictionaries or settings.",
          "markdownDescription": "Hide the options to add words to dictionaries or settings.",
          "scope": "resource",
          "type": "boolean"
        },
        "cSpell.hideIssuesWhileTyping": {
          "default": "Word",
          "description": "Control how spelling issues are displayed while typing. See: `#cSpell.revealIssuesAfterDelayMS#` to control when issues are revealed.",
          "enum": [
            "Off",
            "Word",
            "Line",
            "Document"
          ],
          "enumDescriptions": [
            "Show issues while typing",
            "Hide issues while typing in the current word",
            "Hide issues while typing on the line",
            "Hide all issues while typing in the document"
          ],
          "markdownDescription": "Control how spelling issues are displayed while typing.\nSee: `#cSpell.revealIssuesAfterDelayMS#` to control when issues are revealed.",
          "scope": "application",
          "since": "4.0.0",
          "title": "Hide Issues While Typing",
          "type": "string"
        },
        "cSpell.maxDuplicateProblems": {
          "default": 20,
          "description": "The maximum number of times the same word can be flagged as an error in a file.",
          "markdownDescription": "The maximum number of times the same word can be flagged as an error in a file.",
          "scope": "resource",
          "type": "number"
        },
        "cSpell.maxNumberOfProblems": {
          "default": 100,
          "description": "Controls the maximum number of spelling errors per document.",
          "markdownDescription": "Controls the maximum number of spelling errors per document.",
          "scope": "resource",
          "type": "number"
        },
        "cSpell.minWordLength": {
          "default": 4,
          "description": "The minimum length of a word before checking it against a dictionary.",
          "markdownDescription": "The minimum length of a word before checking it against a dictionary.",
          "scope": "resource",
          "type": "number"
        },
        "cSpell.numSuggestions": {
          "default": 8,
          "description": "Controls the number of suggestions shown.",
          "markdownDescription": "Controls the number of suggestions shown.",
          "scope": "resource",
          "type": "number"
        },
        "cSpell.revealIssuesAfterDelayMS": {
          "default": 1500,
          "description": "Reveal hidden issues related to `#cSpell.hideIssuesWhileTyping#` after a delay in milliseconds.",
          "markdownDescription": "Reveal hidden issues related to `#cSpell.hideIssuesWhileTyping#` after a delay in milliseconds.",
          "scope": "application",
          "since": "4.0.0",
          "title": "Reveal Issues After a Delay in Milliseconds",
          "type": "number"
        },
        "cSpell.showAutocompleteDirectiveSuggestions": {
          "default": true,
          "description": "Show CSpell in-document directives as you type.\n\n**Note:** VS Code must be restarted for this setting to take effect.",
          "markdownDescription": "Show CSpell in-document directives as you type.\n\n**Note:** VS Code must be restarted for this setting to take effect.",
          "scope": "language-overridable",
          "type": "boolean"
        },
        "cSpell.showCommandsInEditorContextMenu": {
          "default": true,
          "description": "Show Spell Checker actions in Editor Context Menu",
          "markdownDescription": "Show Spell Checker actions in Editor Context Menu",
          "scope": "application",
          "type": "boolean"
        },
        "cSpell.showSuggestionsLinkInEditorContextMenu": {
          "default": true,
          "description": "Show Spelling Suggestions link in the top level context menu.",
          "markdownDescription": "Show Spelling Suggestions link in the top level context menu.",
          "scope": "application",
          "type": "boolean"
        },
        "cSpell.suggestionMenuType": {
          "default": "quickPick",
          "description": "The type of menu used to display spelling suggestions.",
          "enum": [
            "quickPick",
            "quickFix"
          ],
          "enumDescriptions": [
            "Suggestions will appear as a drop down at the top of the IDE. (Best choice for Vim Key Bindings)",
            "Suggestions will appear inline near the word, inside the text editor."
          ],
          "markdownDescription": "The type of menu used to display spelling suggestions.",
          "scope": "resource",
          "type": "string"
        },
        "cSpell.suggestionNumChanges": {
          "default": 3,
          "description": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
          "markdownDescription": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
          "scope": "resource",
          "type": "number"
        },
        "cSpell.validateDirectives": {
          "description": "Verify that the in-document directives are correct.",
          "markdownDescription": "Verify that the in-document directives are correct.",
          "scope": "window",
          "type": "boolean"
        }
      },
      "title": "Reporting and Display",
      "type": "object"
    }
  ],
  "maxItems": 10,
  "minItems": 10,
  "type": "array"
}
